<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"

  xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows"
  xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"

  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:mamc="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

  xmlns:cttn_sl_view_converter="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Converter;assembly=ContentTypeTextNet.SharedLibrary"

  xmlns:app="clr-namespace:ContentTypeTextNet.MnMn.MnMn"
  xmlns:app_view_controls="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Controls"
  xmlns:app_view_converter="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Converter"

>
  <!-- ============== 規定値 ============== -->

  <sys:Double x:Key="GridSplitterLength">4</sys:Double>
  <Thickness x:Key="ItemMargin">1,1,2,1</Thickness>
  <Thickness x:Key="IndependentMargin">2</Thickness>
  <Thickness x:Key="IndependentHorizonMargin">2,0</Thickness>
  <Thickness x:Key="IndependentVericalMargin">0,2</Thickness>
  <sys:Double x:Key="BitMarginWidth">1</sys:Double>
  <sys:Double x:Key="HalfMarginWidth">4</sys:Double>
  <sys:Double x:Key="BaseMarginWidth">8</sys:Double>
  <sys:Double x:Key="SeparatorWidth">4</sys:Double>
  <sys:Double x:Key="SeparatorHeight">4</sys:Double>
  <sys:Double x:Key="MenuIndentWidth">8</sys:Double>
  <sys:Double x:Key="SmallIndentWidth">10</sys:Double>
  <sys:Double x:Key="NormalIndentWidth">20</sys:Double>
  <sys:Double x:Key="BigIndentWidth">40</sys:Double>
  <Thickness x:Key="BitMargin" Left="{StaticResource BitMarginWidth}" Top="{StaticResource BitMarginWidth}" Right="{StaticResource BitMarginWidth}" Bottom="{StaticResource BitMarginWidth}" />
  <Thickness x:Key="LeftMargin" Left="{StaticResource BaseMarginWidth}" Top="0" Right="0" Bottom="0" />
  <Thickness x:Key="TopMargin" Left="0" Top="{StaticResource BaseMarginWidth}" Right="0" Bottom="0" />
  <Thickness x:Key="RightMargin" Left="0" Top="0" Right="{StaticResource BaseMarginWidth}" Bottom="0" />
  <Thickness x:Key="BottomMargin" Left="0" Top="0" Right="0" Bottom="{StaticResource BaseMarginWidth}" />
  <Thickness x:Key="AllMargin" Left="{StaticResource BaseMarginWidth}" Top="{StaticResource BaseMarginWidth}" Right="{StaticResource BaseMarginWidth}" Bottom="{StaticResource BaseMarginWidth}" />
  <Thickness x:Key="VericalMargin" Left="0" Top="{StaticResource BaseMarginWidth}" Right="0" Bottom="{StaticResource BaseMarginWidth}" />
  <Thickness x:Key="HorizonMargin" Left="{StaticResource BaseMarginWidth}" Top="0" Right="{StaticResource BaseMarginWidth}" Bottom="0" />
  <Thickness x:Key="BasePadding" Left="4" Top="4" Right="4" Bottom="4" />

  <Thickness x:Key="VerticalContrlMargin" Left="0" Top="{StaticResource HalfMarginWidth}" Right="0" Bottom="{StaticResource HalfMarginWidth}" />
  <Thickness x:Key="HorizontalContrlMargin" Left="{StaticResource HalfMarginWidth}" Top="0" Right="{StaticResource HalfMarginWidth}" Bottom="0" />

  <sys:Double x:Key="FontSmallSize">10</sys:Double>
  <sys:Double x:Key="FontBaseSize">12</sys:Double>
  <sys:Double x:Key="FontBigSize">14</sys:Double>
  <sys:Double x:Key="FontLargeSize">16</sys:Double>

  <!-- LoadState -->
  <Color x:Key="LoadState_None">Gray</Color>
  <Color x:Key="LoadState_Preparation">Orange</Color>
  <Color x:Key="LoadState_Loading">Yellow</Color>
  <Color x:Key="LoadState_Loaded">Lime</Color>
  <Color x:Key="LoadState_Failure">Red</Color>

  <!-- SourceLoadState -->
  <Color x:Key="SourceLoadState_None">Gray</Color>
  <Color x:Key="SourceLoadState_SourceLoading">Orange</Color>
  <Color x:Key="SourceLoadState_SourceChecking">Pink</Color>
  <Color x:Key="SourceLoadState_InformationLoading">Yellow</Color>
  <Color x:Key="SourceLoadState_Completed">Lime</Color>
  <Color x:Key="SourceLoadState_Failure">Red</Color>

  <!-- TextBox -->
  <Thickness x:Key="TextBoxPadding">2</Thickness>

  <sys:Double x:Key="MinimumIconWidth">12</sys:Double>
  <sys:Double x:Key="MinimumIconHeight">12</sys:Double>

  <sys:Double x:Key="SmallIconWidth">16</sys:Double>
  <sys:Double x:Key="SmallIconHeight">16</sys:Double>

  <sys:Double x:Key="NormalIconWidth">24</sys:Double>
  <sys:Double x:Key="NormalIconHeight">24</sys:Double>

  <sys:Double x:Key="BigIconWidth">32</sys:Double>
  <sys:Double x:Key="BigIconHeight">32</sys:Double>

  <sys:Double x:Key="LargeIconWidth">48</sys:Double>
  <sys:Double x:Key="LargeIconHeight">48</sys:Double>

  <!-- ============== スタイル ==============  -->
  <!-- ViewBox -->
  <Style x:Key="IconBox" TargetType="Viewbox">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Stretch" Value="UniformToFill" />
  </Style>

  <Style x:Key="MinimumIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Width" Value="{StaticResource MinimumIconWidth}" />
    <Setter Property="Height" Value="{StaticResource MinimumIconHeight}" />
  </Style>
  <Style x:Key="MinimumItemBox" TargetType="Viewbox" BasedOn="{StaticResource MinimumIconBox}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <Style x:Key="SmallIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Width" Value="{StaticResource SmallIconWidth}" />
    <Setter Property="Height" Value="{StaticResource SmallIconHeight}" />
  </Style>
  <Style x:Key="SmallAppendIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Canvas.Left" Value="4" />
    <Setter Property="Canvas.Top" Value="4" />
    <Setter Property="Width" Value="20" />
    <Setter Property="Height" Value="20" />
    <Setter Property="Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="0" Direction="315" ShadowDepth="2" Color="{DynamicResource WhiteColor}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SmallItemBox" TargetType="Viewbox" BasedOn="{StaticResource SmallIconBox}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <Style x:Key="NormalIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Width" Value="{StaticResource NormalIconWidth}" />
    <Setter Property="Height" Value="{StaticResource NormalIconHeight}" />
  </Style>
  <Style x:Key="NormalItemBox" TargetType="Viewbox" BasedOn="{StaticResource NormalIconBox}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <Style x:Key="BigIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Width" Value="{StaticResource BigIconWidth}" />
    <Setter Property="Height" Value="{StaticResource BigIconHeight}" />
  </Style>
  <Style x:Key="BigItemBox" TargetType="Viewbox" BasedOn="{StaticResource BigIconBox}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <Style x:Key="LargeIconBox" TargetType="Viewbox" BasedOn="{StaticResource IconBox}">
    <Setter Property="Width" Value="{StaticResource LargeIconWidth}" />
    <Setter Property="Height" Value="{StaticResource LargeIconHeight}" />
  </Style>
  <Style x:Key="LargeItemBox" TargetType="Viewbox" BasedOn="{StaticResource LargeItemBox}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <!-- Canvas -->
  <!-- 元データが 24 x 24 の描画領域 -->
  <Style x:Key="IconCanvas-24x24" TargetType="Canvas">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Width" Value="24" />
    <Setter Property="Height" Value="24" />
    <Setter Property="Background" Value="Transparent" />
  </Style>

  <!-- Path -->
  <Style x:Key="IconPath" TargetType="Path">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="SnapsToDevicePixels" Value="True" />
  </Style>

  <Style x:Key="MinimumDefaultIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource LabelTextBrush}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>

  <Style x:Key="MinimumAccentIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource AccentBaseColorBrush}" />
    <Setter Property="Fill" Value="{DynamicResource AccentBaseColorBrush}" />
    <Setter Property="Stroke" Value="{DynamicResource BlackBrush}" />
    <Setter Property="StrokeThickness" Value="1" />
    <Setter Property="Clip" Value="{Binding Data, RelativeSource={RelativeSource Self}}" />
  </Style>

  <!-- リンク系は実装のレイアウト依存 -->
  <Style x:Key="MinimumLinkIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
    <Setter Property="Margin" Value="{StaticResource IndependentMargin}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>

  <Style x:Key="SmallDefaultIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource LabelTextBrush}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>

  <Style x:Key="SmallAccentIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource AccentBaseColorBrush}" />
    <Setter Property="Stroke" Value="{DynamicResource BlackBrush}" />
    <Setter Property="StrokeThickness" Value="1" />
    <Setter Property="Clip" Value="{Binding Data, RelativeSource={RelativeSource Self}}" />
  </Style>

  <Style x:Key="SmallLinkIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>

  <Style x:Key="NormalDefaultIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource LabelTextBrush}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>

  <Style x:Key="NormalAccentIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{DynamicResource AccentBaseColorBrush}" />
    <Setter Property="Stroke" Value="{DynamicResource BlackBrush}" />
    <Setter Property="StrokeThickness" Value="1" />
    <Setter Property="Clip" Value="{Binding Data, RelativeSource={RelativeSource Self}}" />
  </Style>

  <Style x:Key="NormalLinkIconPath" TargetType="Path" BasedOn="{StaticResource IconPath}">
    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
    <!--<Setter Property="Stroke" Value="{DynamicResource WhiteBrush}" />-->
  </Style>


  <!-- ============ 完結させられる図形 ============= -->

  <!-- ================ Controls ================ -->
  <!-- 独自ウィンドウ -->
  <Style TargetType="mamc:MetroWindow" >
    <Setter Property="WindowStyle" Value="None" />
    <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
    <!--<Setter Property="AllowsTransparency" Value="False" />-->
    <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontSize" Value="{StaticResource FontBaseSize}" />
    <Setter Property="TitleCharacterCasing" Value="Normal" />
  </Style>

  <!--Button -->
  <Style x:Key="ReloadButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <!--<Setter Property="Content" Value="↻" />-->
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Viewbox Style="{StaticResource SmallIconBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <Path Data="{StaticResource Image_Reload}" Style="{StaticResource SmallDefaultIconPath}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="{StaticResource BitMargin}" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />
  </Style>

  <!-- RepeatButton -->
  <Style x:Key="ScrollButton" TargetType="RepeatButton" BasedOn="{StaticResource {x:Type RepeatButton}}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Padding" Value="{StaticResource BitMargin}" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
  </Style>

  <Style x:Key="Indent" TargetType="Separator">
    <Setter Property="Background" Value="{x:Null}" />
  </Style>

  <Style x:Key="SmallIndent" TargetType="Separator" BasedOn="{StaticResource Indent}">
    <Setter Property="Width" Value="{StaticResource SmallIndentWidth}" />
  </Style>
  <Style x:Key="NormalIndent" TargetType="Separator" BasedOn="{StaticResource Indent}">
    <Setter Property="Width" Value="{StaticResource NormalIndentWidth}" />
  </Style>
  <Style x:Key="BigIndent" TargetType="Separator" BasedOn="{StaticResource Indent}">
    <Setter Property="Width" Value="{StaticResource BigIndentWidth}" />
  </Style>

  <!-- GridSplitter -->
  <Style TargetType="GridSplitter">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{DynamicResource SeperatorBrush}"/>
  </Style>
  <Style x:Key="DefaultVericalGridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}" TargetType="GridSplitter">
    <Setter Property="Width" Value="{StaticResource GridSplitterLength}" />
  </Style>
  <Style x:Key="DefaultHorizonGridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}" TargetType="GridSplitter">
    <Setter Property="Height" Value="{StaticResource GridSplitterLength}" />
  </Style>

  <!--Image -->
  <Style TargetType="Image">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Stretch" Value="UniformToFill" />
  </Style>

  <Style x:Key="ItemImage" TargetType="Image" BasedOn="{StaticResource {x:Type Image}}">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
  </Style>

  <Style x:Key="SmallIconImage" TargetType="Image" BasedOn="{StaticResource {x:Type Image}}">
    <Setter Property="Width" Value="{StaticResource SmallIconWidth}" />
    <Setter Property="Height" Value="{StaticResource SmallIconHeight}" />
  </Style>
  <Style x:Key="SmallItemImage" TargetType="Image" BasedOn="{StaticResource ItemImage}">
    <Setter Property="Width" Value="{StaticResource SmallIconWidth}" />
    <Setter Property="Height" Value="{StaticResource SmallIconHeight}" />
  </Style>

  <!--ListBox -->
  <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
    <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
  </Style>

  <!--Menu -->
  <Style x:Key="ToolbarMenu" TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}" />

  <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
  </Style>

  <Style x:Key="ToolbarMenuItem" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}" />

  <!-- toolbar -->
  <Style TargetType="ToolBar" BasedOn="{StaticResource {x:Type ToolBar}}">
    <Setter Property="ToolBarTray.IsLocked" Value="True" />
  </Style>

  <!--SourceLoadState -->
  <Style x:Key="SmallItemSourceLoadState" TargetType="app_view_controls:SourceLoadStateNavigator">
    <Setter Property="Margin" Value="{StaticResource ItemMargin}" />
    <Setter Property="Width" Value="8" />
    <Setter Property="Height" Value="8" />
  </Style>

  <Style x:Key="ItemPanel" TargetType="StackPanel">
    <Style.Resources>
      <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Left" />
      </Style>
      <Style TargetType="AccessText" >
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Left" />
      </Style>
    </Style.Resources>
    <Setter Property="Orientation" Value="Horizontal" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <!--TabDictionary-->
  <Style x:Key="TabReloadButton" TargetType="Button" BasedOn="{StaticResource ReloadButton}">
    <Setter Property="Command" Value="{Binding ReloadCommand}" />
    <Setter Property="IsEnabled" Value="{Binding CanLoad}" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
  </Style>

  <Style x:Key="TabHeader" TargetType="StackPanel">
    <Setter Property="Orientation" Value="Horizontal" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="TabHeaderText" TargetType="TextBlock">
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="TabCloseButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Tag" Value="{x:Static app:Constants.TagTabCloseButton}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Margin" Value="2,0,0,0" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Viewbox Style="{StaticResource SmallIconBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <Path Data="{StaticResource Image_Close}" Style="{StaticResource MinimumDefaultIconPath}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />

    <Setter Property="Command" Value="{Binding DataContext.CloseTabCommand, RelativeSource={RelativeSource AncestorType=UserControl}}" />
    <Setter Property="CommandParameter" Value="{Binding}" />
  </Style>

  <!--TextBox -->
  <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="VerticalTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Margin" Value="{StaticResource VerticalContrlMargin}" />
  </Style>
  <Style x:Key="HorizontalTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Margin" Value="{StaticResource HorizontalContrlMargin}" />
  </Style>

  <!-- 選択可能な文字表示 -->
  <Style x:Key="SelectableReadonlyText" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="mamc:TextBoxHelper.SelectAllOnFocus" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="IsUndoEnabled" Value="False" />
    <Setter Property="UndoLimit" Value="0" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="IsReadOnlyCaretVisible" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
  </Style>

  <!-- 検索 -->
  <Style x:Key="SearchTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Style.Resources>
    </Style.Resources>
    <Setter Property="Width" Value="140" />
    <Setter Property="mamc:TextBoxHelper.ClearTextButton" Value="True" />
    <Setter Property="mamc:TextBoxHelper.TextButton" Value="True" />
    <Setter Property="mamc:TextBoxHelper.ButtonContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Viewbox Style="{StaticResource SmallIconBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <Path Data="{StaticResource Image_Search}" Fill="{DynamicResource TextBrush}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- PasswordBox -->
  <Style TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
    <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="VerticalPasswordBox" TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="0" Top="{StaticResource HalfMarginWidth}" Right="0" Bottom="{StaticResource HalfMarginWidth}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalPasswordBox" TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="{StaticResource HalfMarginWidth}" Top="0" Right="{StaticResource HalfMarginWidth}" Bottom="0" />
      </Setter.Value>
    </Setter>
  </Style>

  <!-- NumericUpDown -->
  <Style TargetType="mamc:NumericUpDown" BasedOn="{StaticResource {x:Type mamc:NumericUpDown}}">
    <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="VerticalNumericUpDown" TargetType="mamc:NumericUpDown" BasedOn="{StaticResource {x:Type mamc:NumericUpDown}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="0" Top="{StaticResource HalfMarginWidth}" Right="0" Bottom="{StaticResource HalfMarginWidth}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalNumericUpDown" TargetType="mamc:NumericUpDown" BasedOn="{StaticResource {x:Type mamc:NumericUpDown}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="{StaticResource HalfMarginWidth}" Top="0" Right="{StaticResource HalfMarginWidth}" Bottom="0" />
      </Setter.Value>
    </Setter>
  </Style>

  <!-- TabControl -->
  <Style TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
    <Setter Property="Padding" Value="0" />
  </Style>

  <Style x:Key="SectionTabControl" TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
    <Setter Property="TabStripPlacement" Value="Left" />
  </Style>

  <Style TargetType="TabPanel">
    <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
  </Style>

  <!-- TabItem -->
  <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Border x:Name="Border"
            HorizontalAlignment="Stretch"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
          >
            <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <DockPanel.Resources>
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
              </DockPanel.Resources>
              <Rectangle x:Name="Underline"
                Height="2"
                Margin="0 1 0 0"
                HorizontalAlignment="Stretch"
                DockPanel.Dock="Bottom"
                Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=(mamc:TabControlHelper.IsUnderlined), Converter={StaticResource BooleanToVisibilityConverter}}"
              />
              <mamc:ContentControlEx x:Name="ContentSite"
                Padding="{TemplateBinding Padding}"
                Foreground="{TemplateBinding Foreground}"
                FontSize="{TemplateBinding mamc:ControlsHelper.HeaderFontSize}"
                FontWeight="{TemplateBinding mamc:ControlsHelper.HeaderFontWeight}"
                FontStretch="{TemplateBinding mamc:ControlsHelper.HeaderFontStretch}"
                Content="{TemplateBinding Header}"
                ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mamc:ControlsHelper.ContentCharacterCasing)}"
                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                ContentTemplate="{TemplateBinding HeaderTemplate}"
                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
              />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter TargetName="ContentSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="Underline" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="Underline" Property="Height" Value="Auto" />
              <Setter TargetName="Underline" Property="Margin" Value="1 0 0 0" />
              <Setter TargetName="Underline" Property="Width" Value="2" />
              <Setter TargetName="Border" Property="BorderThickness" Value="0,1,3,1" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Top">
              <Setter TargetName="ContentSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="Underline" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="Underline" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="Underline" Property="Height" Value="2" />
              <Setter TargetName="Underline" Property="Margin" Value="0 1 0 0" />
              <Setter TargetName="Underline" Property="Width" Value="Auto" />
              <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,3" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="ContentSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="Underline" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="Underline" Property="Height" Value="Auto" />
              <Setter TargetName="Underline" Property="Margin" Value="0 0 1 0" />
              <Setter TargetName="Underline" Property="Width" Value="2" />
              <Setter TargetName="Border" Property="BorderThickness" Value="3,1,0,1" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="ContentSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="Underline" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="Underline" Property="Height" Value="2" />
              <Setter TargetName="Underline" Property="Margin" Value="0 0 0 1" />
              <Setter TargetName="Underline" Property="Width" Value="Auto" />
              <Setter TargetName="Border" Property="BorderThickness" Value="1,3,1,0" />
            </Trigger>

            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColorBrush2}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
              <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger SourceName="ContentSite" Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColorBrush4}" />
              <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayHoverBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="ContentSite" Property="IsMouseOver" Value="True" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColorBrush3}" />
              <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource HighlightBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush4}" />
              <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource GrayNormalBrush}" />
              <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayHoverBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="mamc:ControlsHelper.HeaderFontSize" Value="{StaticResource FontBaseSize}" />
    <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
  </Style>

  <Style x:Key="SectionTabItem" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
    <Setter Property="mamc:ControlsHelper.HeaderFontSize" Value="{StaticResource FontLargeSize}" />
  </Style>

  <Style x:Key="ParentItemLikeText" TargetType="TextBlock">
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Path=(TextElement.Foreground)}" />
    <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Path=(TextElement.FontSize)}" />
  </Style>

  <Style TargetType="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="Foreground">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource HighlightColor}" />
      </Setter.Value>
    </Setter>
    <Setter Property="TextDecorations" Value="Underline" />
  </Style>

  <!-- Label -->
  <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <!-- button -->
  <Style x:Key="VerticalButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="{StaticResource BitMarginWidth}" Top="{StaticResource HalfMarginWidth}" Right="{StaticResource BitMarginWidth}" Bottom="{StaticResource HalfMarginWidth}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Margin">
      <Setter.Value>
        <Thickness Left="{StaticResource HalfMarginWidth}" Top="{StaticResource BitMarginWidth}" Right="{StaticResource HalfMarginWidth}" Bottom="{StaticResource BitMarginWidth}" />
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="Hyperlink" TargetType="Button">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Opacity" Value="0.75" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Opacity" Value="1" />
      </Trigger>
    </Style.Triggers>

    <Setter Property="Opacity" Value="0.8" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ControlTemplate.Resources>
            <cttn_sl_view_converter:ComplementaryColorConverter x:Key="ComplementaryColorConverter" />
          </ControlTemplate.Resources>
          <ContentControl x:Name="Content" Cursor="Hand">
            <ContentControl.Style>
              <Style TargetType="ContentControl">
                <Style.Triggers>
                  <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Effect">
                      <Setter.Value>
                        <DropShadowEffect Color="{DynamicResource AccentColor4}" Direction="0" BlurRadius="2" ShadowDepth="0" />
                      </Setter.Value>
                    </Setter>
                  </Trigger>
                  <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                    <Setter Property="Effect">
                      <Setter.Value>
                        <DropShadowEffect Color="{DynamicResource AccentBaseColor}" Direction="0" BlurRadius="4" ShadowDepth="0" />
                      </Setter.Value>
                    </Setter>
                    <Setter Property="Cursor" Value="Hand" />
                  </DataTrigger>
                </Style.Triggers>

                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
              </Style>
            </ContentControl.Style>
            <ContentControl.Content>
              <Grid HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="Transparent" >
                <Grid HorizontalAlignment="Left">
                  <ContentControl
                    x:Name="HyperLink"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Content}"
                    Foreground="{Binding Foreground, ElementName=Content}"
                    FontWeight="Bold"
                    Margin="0"
                    Padding="0"
                  />
                  <Rectangle VerticalAlignment="Bottom" Height="1" Fill="{Binding Foreground, ElementName=Content}" Width="{Binding ActualWidth, ElementName=HyperLink}" />
                </Grid>
              </Grid>
            </ContentControl.Content>
          </ContentControl>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HighlightLabel" TargetType="Label">
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Label">
          <Border
            CornerRadius="4" 
            BorderThickness="2,1" 
            BorderBrush="{DynamicResource SemiTransparentWhiteBrush}" 
            Padding="{StaticResource IndependentMargin}"
          >
            <Border.Background>
              <RadialGradientBrush 
                GradientOrigin="0.5,0.5" 
                Center="0.5,0.5" 
                RadiusX="0.5" 
                RadiusY="0.5"
                Opacity="0.7"
              >
                <GradientStop Color="{DynamicResource AccentColor}" Offset="0" />
                <GradientStop Color="{DynamicResource AccentColor2}" Offset="0.75" />
                <GradientStop Color="{DynamicResource AccentColor3}" Offset="1" />
              </RadialGradientBrush>
            </Border.Background>

            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--CheckBox-->
  <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="VerticalCheckBox" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="Margin" Value="{StaticResource BottomMargin}" />
  </Style>
  <Style x:Key="HorizontalCheckBox" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="Margin" Value="{StaticResource RightMargin}" />
  </Style>

  <!-- RadioButton -->
  <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="VerticalRadioButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
    <Setter Property="Margin" Value="{StaticResource BottomMargin}" />
  </Style>
  <Style x:Key="HorizontalRadioButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
    <Setter Property="Margin" Value="{StaticResource RightMargin}" />
  </Style>


  <!-- Flyout -->
  <Style x:Key="FinderFlyout" TargetType="mamc:Flyout">
    <Setter Property="Theme" Value="Inverse" />
    <Setter Property="Position" Value="Right" />
  </Style>

  <!-- DropDownButton -->
  <Style TargetType="xctk:DropDownButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
          <ControlTemplate.Resources>
            <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
            <cttn_sl_view_converter:LogicalNotConverter x:Key="LogicalNotConverter" />
          </ControlTemplate.Resources>
          <Grid x:Name="MainGrid" SnapsToDevicePixels="True" ShowGridLines="True">
            <ToggleButton
              x:Name="PART_DropDownButton"
              VerticalAlignment="Stretch"
              VerticalContentAlignment="Stretch"
              HorizontalAlignment="Stretch"
              HorizontalContentAlignment="Stretch"
              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
              Margin="0"
              Padding="0"
              IsHitTestVisible="{Binding IsChecked, RelativeSource={RelativeSource Self}, Converter={StaticResource LogicalNotConverter}}"
            >
              <Grid  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <ContentPresenter
                  Name="ActionButtonContent"
                  Grid.Column="0"
                  Margin="{TemplateBinding Padding}"
                  Content="{TemplateBinding Content}"
                  ContentTemplate="{TemplateBinding ContentTemplate}"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  RecognizesAccessKey="true"
                />
                <Path
                  x:Name="BtnArrow"
                  Grid.Column="1"
                  Margin="4,3,4,3"
                  Width="8"
                  Height="8"
                  HorizontalAlignment="Center"
                  Fill="{DynamicResource GrayBrush1}"
                  Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                  IsHitTestVisible="false"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  Stretch="Uniform"
                />
              </Grid>
            </ToggleButton>
            <!-- MENU -->
            <Popup x:Name="PART_Popup" StaysOpen="False" IsOpen="{TemplateBinding IsOpen}">
              <Border Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource ContextMenuBorderBrush}" BorderThickness="1">
                <ContentPresenter Content="{TemplateBinding DropDownContent}" />
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="xctk:SplitButton">
    <Style.Resources>
      <Style x:Key="ButtonSplitFocusVisual">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate>
              <Rectangle Margin="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1"
                               SnapsToDevicePixels="true"
                               StrokeDashArray="1 2" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:SplitButton}">
          <Grid UseLayoutRounding="True">
            <Border 
              x:Name="PART_Border"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
            >
              <Grid 
                x:Name="PART_Container"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
              >
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Button 
                  x:Name="PART_Button"
                  Grid.Column="0"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch"
                  HorizontalContentAlignment="Stretch"
                  VerticalContentAlignment="Stretch"
                  Style="{DynamicResource ButtonSplitStyle}"
                  Background="{TemplateBinding Background}"
                  Foreground="{TemplateBinding Foreground}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Command="{TemplateBinding Command}"
                  CommandParameter="{TemplateBinding CommandParameter}"
                  CommandTarget="{TemplateBinding CommandTarget}"
                  FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                >
                  <StackPanel 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Orientation="Horizontal"
                  >
                    <mamc:ContentControlEx 
                      x:Name="PART_ButtonContent"
                      Margin="2"
                      Padding="{TemplateBinding Padding}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                      ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mamc:ControlsHelper.ContentCharacterCasing)}"
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      RecognizesAccessKey="True"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      UseLayoutRounding="False" 
                    />
                  </StackPanel>
                </Button>
                <ToggleButton
                  x:Name="PART_Expander"
                  Grid.Column="1"
                  Width="20"
                  Background="{TemplateBinding Background}"
                  Foreground="{TemplateBinding Foreground}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                >
                  <ToggleButton.Style>
                    <Style BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" TargetType="{x:Type ToggleButton}">
                      <Setter Property="Foreground" Value="{DynamicResource BlackColorBrush}" />
                      <Setter Property="Background" Value="{DynamicResource WhiteColorBrush}" />
                      <Setter Property="BorderThickness" Value="0" />
                      <Setter Property="Padding" Value="2" />
                      <Setter Property="SnapsToDevicePixels" Value="True" />
                      <Setter Property="HorizontalAlignment" Value="Stretch" />
                      <Setter Property="VerticalAlignment" Value="Stretch" />
                      <Setter Property="HorizontalContentAlignment" Value="Center" />
                      <Setter Property="VerticalContentAlignment" Value="Center" />
                      <Setter Property="Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              >
                              <ContentPresenter 
                                  x:Name="PART_ContentPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  RecognizesAccessKey="True" 
                                />
                            </Border>
                            <ControlTemplate.Triggers>
                              <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                              </Trigger>
                              <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush8}" />
                              </Trigger>
                              <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush5}" />
                              </Trigger>
                              <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush10}" />
                              </Trigger>
                            </ControlTemplate.Triggers>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </ToggleButton.Style>
                  <!-- Material - ChevronDown -->
                  <ContentControl Style="{DynamicResource PathIconContentControlStyle}" Content="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" Width="9" Height="9" />
                </ToggleButton>
              </Grid>
            </Border>
            <Popup 
              x:Name="PART_Popup"
              AllowsTransparency="True"
              Focusable="False"
              MinWidth="{TemplateBinding ActualWidth}"
              IsOpen="{TemplateBinding IsOpen}"
              PlacementTarget="{Binding ElementName=PART_Border}"
              PopupAnimation="Fade"
              StaysOpen="True"
            >
              <Border Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource ContextMenuBorderBrush}" BorderThickness="1">
                <ContentPresenter Content="{TemplateBinding DropDownContent}" />
              </Border>
            </Popup>
          </Grid>
          <!--<ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ArrowMouseOverBrush, Mode=OneWay}" />
            </Trigger>
            <Trigger SourceName="PART_Expander" Property="IsPressed" Value="True">
              <Setter TargetName="PART_Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ArrowPressedBrush, Mode=OneWay}" />
            </Trigger>
          </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value=".55" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- ToggleButton -->
  <Style x:Key="OrderAscendingButton" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="ContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <Viewbox Style="{StaticResource SmallIconBox}">
                <Canvas Style="{StaticResource IconCanvas-24x24}">
                  <Path Data="{StaticResource Image_Order-Descending}" Style="{StaticResource SmallDefaultIconPath}" />
                </Canvas>
              </Viewbox>
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Viewbox Style="{StaticResource SmallIconBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <Path Data="{StaticResource Image_Order-Ascending}" Style="{StaticResource SmallDefaultIconPath}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HtmlDescriptionDocument" TargetType="FlowDocumentScrollViewer" x:Shared="false">
    <Style.Resources>
      <Style TargetType="Run">
        <Setter Property="BaselineAlignment" Value="Center"/>
      </Style>
    </Style.Resources>
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
    <Setter Property="Document">
      <Setter.Value>
        <FlowDocument
          FontSize="11.5"
          PagePadding="10, 2, 10, 0"
        />
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PlayerDescriptionDocument" TargetType="FlowDocumentScrollViewer" x:Shared="false" BasedOn="{StaticResource HtmlDescriptionDocument}">
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
  </Style>

</ResourceDictionary>