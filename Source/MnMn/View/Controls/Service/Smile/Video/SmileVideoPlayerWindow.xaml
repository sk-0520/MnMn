<mamc:MetroWindow
  x:Name="root"
  x:Class="ContentTypeTextNet.MnMn.MnMn.View.Controls.Service.Smile.Video.SmileVideoPlayerWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"

  xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"

  xmlns:mamc="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
  xmlns:mamb="clr-namespace:MahApps.Metro.Behaviours;assembly=MahApps.Metro"

  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:oxy="http://oxyplot.org/wpf"

  xmlns:vlc_wpf="clr-namespace:Meta.Vlc.Wpf;assembly=Meta.Vlc.Wpf"

  xmlns:cttn_sl_view_converter="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Converter;assembly=ContentTypeTextNet.SharedLibrary"
  xmlns:cttn_sl_view_attached="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Attached;assembly=ContentTypeTextNet.SharedLibrary"

  xmlns:app="clr-namespace:ContentTypeTextNet.MnMn.MnMn"
  xmlns:app_define="clr-namespace:ContentTypeTextNet.MnMn.MnMn.Define"
  xmlns:app_define_service_smile_video="clr-namespace:ContentTypeTextNet.MnMn.MnMn.Define.Service.Smile.Video"
  xmlns:app_view_attachment="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Attachment"
  xmlns:app_view_controls="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Controls"
  xmlns:app_view_converter="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Converter"
  xmlns:app_view_controls_service_smile_video_setting="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Controls.Service.Smile.Video.Setting"
  xmlns:app_view_converter_service_smile_video="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Converter.Service.Smile.Video"


  Icon="/Resources/Service/Smile/Service-Smile.ico"

  Left="{Binding Left, Mode=TwoWay}"
  Top="{Binding Top, Mode=TwoWay}"
  Width="{Binding Width, Mode=TwoWay}"
  Height="{Binding Height, Mode=TwoWay}"
  WindowState="{Binding State, Mode=TwoWay}"

  ShowTitleBar="{Binding IsNormalWindow}"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
  d:DesignHeight="540" d:DesignWidth="780"
>
  <i:Interaction.Behaviors>
    <app_view_attachment:WindowTitleBehavior Service="SmileVideo" Title="{Binding Title}" />
    <mamb:BorderlessWindowBehavior EnableDWMDropShadow="True" />
  </i:Interaction.Behaviors>
  <mamc:MetroWindow.Resources>
    <ResourceDictionary>
      <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/View/Resources/ListBoxDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/GridSplitterDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/ImageDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/MenuDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/TabDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/TextBoxDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/WindowChromeDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>-->
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <app_view_converter:MultiCommandParameterConverter x:Key="MultiCommandParameterConverter" />

      <sys:Double x:Key="ImageWidth">100</sys:Double>
      <sys:Double x:Key="ImageHeight">80</sys:Double>

      <sys:Double x:Key="VideoInfoWidth">120</sys:Double>
      <sys:Double x:Key="VideoInfoHeight">120</sys:Double>

      <sys:Double x:Key="CommentShowTimestampMinWidth">60</sys:Double>
      <sys:Double x:Key="CommentShowColorSize">8</sys:Double>

      <cttn_sl_view_converter:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
      <cttn_sl_view_converter:IsEmptyCollectionConverter x:Key="IsEmptyCollectionConverter" />
      <cttn_sl_view_converter:IsNotEmptyCollectionConverter x:Key="IsNotEmptyCollectionConverter" />
      <cttn_sl_view_converter:TimeSpanToMillisecondConverter x:Key="TimeSpanToMillisecondConverter" />
      <cttn_sl_view_converter:LogicalNotConverter x:Key="LogicalNotConverter" />
      <cttn_sl_view_converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
      <cttn_sl_view_converter:HasTextLengthConverter x:Key="HasTextLengthConverter" />

      <app_view_converter:LoadStateIsLoadedConverter x:Key="LoadStateIsLoadedConverter" />
      <app_view_converter:HumanLikeByteConverter x:Key="HumanLikeByteConverter" />
      <app_view_converter:NegativeDoubleConverter x:Key="NegativeDoubleConverter" />
      <app_view_converter_service_smile_video:TimespanToHMFormatConverter x:Key="TimespanToHMFormatConverter" />
      <app_view_converter_service_smile_video:BookmarkLevelConverter x:Key="BookmarkLevelConverter" />
      <app_view_converter_service_smile_video:CaptionHeightConverter x:Key="CaptionHeightConverter" />
      <app_view_converter_service_smile_video:ThumbnailPredominantColorConverter x:Key="ThumbnailPredominantColorConverter" />

      <CollectionViewSource x:Key="PlayListItems" Source="{Binding PlayListItems}" />

      <SolidColorBrush x:Key="SimpleBackgound" Color="{Binding BackgroundColor}" po:Freeze="True" />
      <SolidColorBrush x:Key="AutoBackground" Color="{Binding ThumbnailImage, Converter={StaticResource ThumbnailPredominantColorConverter}, ConverterParameter=ffff00}" />

      <Style x:Key="ThumbnailImage" TargetType="Image" >
        <Setter Property="Width" Value="{StaticResource ImageWidth}" />
        <Setter Property="Height" Value="{StaticResource ImageHeight}" />
      </Style>

      <Style x:Key="PlayListVisible">
        <Style.Triggers>
          <DataTrigger Binding="{Binding PlayListItems.CanItemChange}" Value="True">
            <Setter Property="Menu.IsEnabled" Value="True" />
            <Setter Property="Menu.Visibility" Value="Visible" />
            <Setter Property="Separator.Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="Menu.IsEnabled" Value="False" />
        <Setter Property="Menu.Visibility" Value="Collapsed" />
        <Setter Property="Separator.Visibility" Value="Collapsed" />
      </Style>

      <Style x:Key="ButtonImage" TargetType="Image" BasedOn="{StaticResource ThumbnailImage}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
      </Style>

      <Style x:Key="StatePanel" TargetType="Canvas">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
      </Style>

      <Style x:Key="StateControl" TargetType="app_view_controls:LoadStateNavigator">
        <Setter Property="Width" Value="6" />
        <Setter Property="Height" Value="6" />
        <Setter Property="Canvas.Left" Value="10" />
        <Setter Property="Canvas.Top" Value="10" />
        <Setter Property="LoadedToVisibility" Value="Visible" />
      </Style>

      <Style x:Key="UserSelect" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Margin" Value="4,0,0,0" />
      </Style>

      <ControlTemplate x:Key="CommentTemplate">
        <Grid>
          <ToggleButton x:Name="PART_SwitchComment" ToolTip="コメント表示" IsChecked="{Binding PlayerVisibleComment}">
            <!--<Image Source="/Resources/Service/Smile/Video/Player/CommentShow.png" Style="{StaticResource ButtonImage}" />-->
            <Viewbox Style="{StaticResource SmallIconBox}">
              <Canvas Style="{StaticResource IconCanvas-24x24}">
                <!-- https://materialdesignicons.com/icon/comment-multiple-outline -->
                <Path Data="M12,23A1,1 0 0,1 11,22V19H7A2,2 0 0,1 5,17V7C5,5.89 5.9,5 7,5H21A2,2 0 0,1 23,7V17A2,2 0 0,1 21,19H16.9L13.2,22.71C13,22.9 12.75,23 12.5,23V23H12M13,17V20.08L16.08,17H21V7H7V17H13M3,15H1V3A2,2 0 0,1 3,1H19V3H3V15Z" Style="{StaticResource SmallDefaultIconPath}" />
              </Canvas>
            </Viewbox>
          </ToggleButton>
          <Canvas Panel.ZIndex="100">
            <Border
              x:Name="PART_CommentAreaSliderParent"
              Canvas.Left="0"
              Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource NegativeDoubleConverter}}"
              Width="{Binding ActualWidth, ElementName=PART_SwitchComment}"
              Background="{DynamicResource WindowBackgroundBrush}"
              BorderBrush="{DynamicResource AccentColorBrush3}"
              BorderThickness="2, 1, 2, 1"
              Opacity="0"
              Visibility="{Binding PlayerVisibleComment, Converter={StaticResource BooleanToVisibilityConverter}}"
            >
              <Slider
                Orientation="Vertical"
                Minimum="50"
                Maximum="100"
                Height="100"
                IsDirectionReversed="True"
                Focusable="False"
                HorizontalAlignment="Center"
                Value="{Binding CommentEnabledPercent}"
                Style="{StaticResource FlatSlider}"
              />
            </Border>
          </Canvas>
        </Grid>
        <ControlTemplate.Triggers>
          <EventTrigger RoutedEvent="Control.MouseEnter">
            <BeginStoryboard>
              <Storyboard >
                <DoubleAnimation Duration="00:00:00.1" To="0.9" Storyboard.TargetName="PART_CommentAreaSliderParent" Storyboard.TargetProperty="Opacity"/>
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
          <EventTrigger RoutedEvent="Control.MouseLeave">
            <BeginStoryboard>
              <Storyboard >
                <DoubleAnimation Duration="00:00:00.5" To="0" Storyboard.TargetName="PART_CommentAreaSliderParent" Storyboard.TargetProperty="Opacity"/>
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </ResourceDictionary>
  </mamc:MetroWindow.Resources>
  <mamc:MetroWindow.InputBindings>
    <KeyBinding Key="Esc" Command="{Binding FullScreenCancelCommand}" />
    <KeyBinding Key="Return" Modifiers="Alt" Command="{Binding SwitchFullScreenCommand}" />

    <KeyBinding Key="Space" Command="{Binding PlayerKeySpaceCommand}" />
    <KeyBinding Key="Home" Command="{Binding SeekHeadCommand}" />

    <KeyBinding Key="F" Modifiers="Ctrl" Command="{Binding LoadNextPlayListItemCommand}" />
    <KeyBinding Key="B" Modifiers="Ctrl" Command="{Binding LoadPrevPlayListItemCommand}" />

    <KeyBinding Key="Right" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>True</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Setting}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Right" Modifiers="Shift" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>True</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Percent}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Right" Modifiers="Ctrl" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>True</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Absolute}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Left" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>False</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Setting}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Left" Modifiers="Shift" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>False</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Percent}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Left" Modifiers="Ctrl" Command="{Binding ChangeSeekVideoPositionCommand}">
      <KeyBinding.CommandParameter>
        <MultiBinding Converter="{StaticResource MultiCommandParameterConverter}" ConverterParameter="Service.Smile.Video.SmileVideoChangeVideoPositionCommandParameterModel">
          <Binding>
            <Binding.Source>
              <sys:Boolean>False</sys:Boolean>
            </Binding.Source>
          </Binding>
          <Binding Source="{x:Static app_define_service_smile_video:SmileVideoChangeVideoPositionType.Absolute}" />
        </MultiBinding>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Up" Command="{Binding ChangeVolumeCommand}">
      <KeyBinding.CommandParameter>
        <sys:Boolean>True</sys:Boolean>
      </KeyBinding.CommandParameter>
    </KeyBinding>
    <KeyBinding Key="Down" Command="{Binding ChangeVolumeCommand}">
      <KeyBinding.CommandParameter>
        <sys:Boolean>False</sys:Boolean>
      </KeyBinding.CommandParameter>
    </KeyBinding>
  </mamc:MetroWindow.InputBindings>
  <mamc:MetroWindow.Style>
    <Style TargetType="mamc:MetroWindow" BasedOn="{StaticResource {x:Type mamc:MetroWindow}}">
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsNormalWindow}" Value="True">
          <Setter Property="Topmost" Value="{Binding Topmost}" />
        </DataTrigger>
        <DataTrigger Binding="{Binding IsNormalWindow}" Value="False">
          <Setter Property="Topmost" Value="True" />
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="ResizeMode" Value="NoResize" />
          <Setter Property="IgnoreTaskbarOnMaximize" Value="True" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="ShowCloseButton" Value="{Binding IsNormalWindow}" />
      <Setter Property="ShowMaxRestoreButton" Value="{Binding IsNormalWindow}" />
      <Setter Property="ShowMinButton" Value="{Binding IsNormalWindow}" />
      <!--<Setter Property="BorderBrush">
        <Setter.Value>
          <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}" />
        </Setter.Value>
      </Setter>-->
    </Style>
  </mamc:MetroWindow.Style>
  <!--<WindowChrome.WindowChrome>
    <WindowChrome
      ResizeBorderThickness="{Binding ResizeBorderThickness}"
      GlassFrameThickness="0"
      CornerRadius="0"
    >
      <WindowChrome.CaptionHeight>
        <MultiBinding Converter="{StaticResource CaptionHeightConverter}">
          <MultiBinding.ConverterParameter>
            <sys:Double>0</sys:Double>
          </MultiBinding.ConverterParameter>
          <MultiBinding.Bindings>
            <Binding Path="IsNormalWindow" />
            <Binding Path="ActualHeight" ElementName="caption" />
          </MultiBinding.Bindings>
        </MultiBinding>
      </WindowChrome.CaptionHeight>
    </WindowChrome>
  </WindowChrome.WindowChrome>-->

  <DockPanel>
    <!--<ContentControl
      x:Name="caption"
      DockPanel.Dock="Top"
      Visibility="{Binding IsNormalWindow, Converter={StaticResource BooleanToVisibilityConverter}}"
      Style="{StaticResource WindowChromeCaption}"
    />-->
    <!--<Grid
      x:Name="caption"
      DockPanel.Dock="Top"
      Visibility="{Binding IsNormalWindow, Converter={StaticResource BooleanToVisibilityConverter}}"
      Style="{StaticResource WindowChromeCaption}"
    >
      -->
    <!--<Grid.Style>
        <Style TargetType="Grid">
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Grid.Style>-->
    <!--
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Button Grid.Column="0">
        <i:Interaction.Triggers>
          <i:EventTrigger EventName="MouseRightButtonDown">
            <i:InvokeCommandAction Command="{Binding ShowSystemMenuCommand}"/>
          </i:EventTrigger>
          <i:EventTrigger EventName="MouseDoubleClick">
            <i:InvokeCommandAction Command="{Binding CaptionCloseCommand}"/>
          </i:EventTrigger>
        </i:Interaction.Triggers>
        <Button.Template>
          <ControlTemplate>
            <Image Width="16" Height="16" WindowChrome.IsHitTestVisibleInChrome="True" Source="{Binding Icon, RelativeSource={RelativeSource AncestorType=Window}}" />
          </ControlTemplate>
        </Button.Template>
      </Button>
      <Grid Grid.Column="1" >
        <TextBlock VerticalAlignment="Center" FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}" FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}" Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}" />
      </Grid>
      <StackPanel Grid.Column="2" Orientation="Horizontal">
        <Button Style="{StaticResource WindowChromeMinimum}"  />
        <Button Style="{StaticResource WindowChromeMaximum}" />
        <Button Style="{StaticResource WindowChromeClose}" />
      </StackPanel>
    </Grid>-->

    <ToolBar DockPanel.Dock="Top" Visibility="{Binding IsNormalWindow, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Button Command="{Binding OpenCacheDirectoryCommand}">
        <StackPanel Orientation="Horizontal">
          <!--<Image Source="/Resources/Common/Action/FolderOpen.png" Style="{StaticResource SmallItemImage}" />-->
          <Viewbox Style="{StaticResource SmallItemBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <Path Data="{StaticResource Image_Folder}" Style="{StaticResource SmallDefaultIconPath}" />
            </Canvas>
          </Viewbox>
          <TextBlock Text="キャッシュ:" />
          <TextBlock Text="{Binding VideoId}" />
        </StackPanel>
      </Button>
      <Menu Style="{StaticResource ToolbarMenu}">
        <MenuItem Header="マイリスト追加" ItemsSource="{Binding AccountMyListItems}" Style="{StaticResource ToolbarMenuItem}">
          <!-- マイリストは「とりあえずマイリスト」があるから一つもないことはないだろうと思う -->
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource ToolbarMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.AddMyListCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding MyListName}" />
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>
      <Menu>
        <Menu.Style>
          <Style TargetType="Menu" BasedOn="{StaticResource ToolbarMenu}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding BookmarkItems, Converter={StaticResource IsEmptyCollectionConverter}}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Menu.Style>
        <MenuItem Header="ブックマーク追加" ItemsSource="{Binding BookmarkItems}" Style="{StaticResource ToolbarMenuItem}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource ToolbarMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.AddBookmarkCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <StackPanel Orientation="Horizontal">
                <Border>
                  <Border.Width>
                    <Binding Path="Level" Converter="{StaticResource BookmarkLevelConverter}">
                      <Binding.ConverterParameter>
                        <sys:Int32>8</sys:Int32>
                      </Binding.ConverterParameter>
                    </Binding>
                  </Border.Width>
                </Border>
                <TextBlock Text="{Binding Name}" />
              </StackPanel>
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>

      <Separator Visibility="{Binding PlayListItems.CanItemChange, Converter={StaticResource BooleanToVisibilityConverter}}" />
      <Button Command="{Binding LoadPrevPlayListItemCommand}" Visibility="{Binding PlayListItems.CanItemChange, Converter={StaticResource BooleanToVisibilityConverter}}">
        <!--<Image Source="/Resources/Service/Smile/Video/Player/Backward.png" Style="{StaticResource ButtonImage}" />-->
        <Viewbox Style="{StaticResource SmallIconBox}">
          <Canvas Style="{StaticResource IconCanvas-24x24}">
            <Path Data="{StaticResource Image_NavigationPrev}" Style="{StaticResource SmallDefaultIconPath}" />
          </Canvas>
        </Viewbox>
      </Button>
      <Menu Visibility="{Binding PlayListItems.CanItemChange, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{StaticResource ToolbarMenu}">
        <MenuItem Header="プレイリスト" Style="{StaticResource ToolbarMenuItem}">
          <MenuItem.ItemsSource>
            <CompositeCollection>
              <!-- ショートカット名バインドしたかったけど今のレイアウトだとできなんだ -->
              <MenuItem Header="次の動画" Command="{Binding LoadNextPlayListItemCommand}" InputGestureText="Ctrl + F">
                <MenuItem.Icon>
                  <!--<Image Source="/Resources/Service/Smile/Video/Player/Forward.png" Style="{StaticResource SmallIconImage}" />-->
                  <Viewbox Style="{StaticResource SmallIconBox}">
                    <Canvas Style="{StaticResource IconCanvas-24x24}">
                      <Path Data="{StaticResource Image_NavigationNext}" Style="{StaticResource SmallDefaultIconPath}" />
                    </Canvas>
                  </Viewbox>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="前の動画" Command="{Binding LoadPrevPlayListItemCommand}" InputGestureText="Ctrl + B">
                <MenuItem.Icon>
                  <!--<Image Source="/Resources/Service/Smile/Video/Player/Backward.png" Style="{StaticResource SmallIconImage}" />-->
                  <Viewbox Style="{StaticResource SmallIconBox}">
                    <Canvas Style="{StaticResource IconCanvas-24x24}">
                      <Path Data="{StaticResource Image_NavigationPrev}" Style="{StaticResource SmallDefaultIconPath}" />
                    </Canvas>
                  </Viewbox>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="ランダム再生" IsCheckable="True" IsChecked="{Binding IsRandomPlay}" Style="{StaticResource {x:Type MenuItem}}" />
              <MenuItem Header="次動画へ自動遷移" IsCheckable="True" IsChecked="{Binding CanPlayNextVieo.Value}" Style="{StaticResource {x:Type MenuItem}}" />
              <Separator />
              <CollectionContainer Collection="{Binding Source={StaticResource PlayListItems}}" />
            </CompositeCollection>
          </MenuItem.ItemsSource>
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource ToolbarMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.LoadSelectPlayListItemCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
              <Setter Property="IsChecked" Value="{Binding IsPlaying}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" />
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>
      <Button Command="{Binding LoadNextPlayListItemCommand}" Visibility="{Binding PlayListItems.CanItemChange, Converter={StaticResource BooleanToVisibilityConverter}}">
        <!--<Image Source="/Resources/Service/Smile/Video/Player/Forward.png" Style="{StaticResource ButtonImage}" />-->
        <Viewbox Style="{StaticResource SmallIconBox}">
          <Canvas Style="{StaticResource IconCanvas-24x24}">
            <Path Data="{StaticResource Image_NavigationNext}" Style="{StaticResource SmallDefaultIconPath}" />
          </Canvas>
        </Viewbox>
      </Button>

      <Separator />

      <Menu Style="{StaticResource ToolbarMenu}">
        <Menu.Resources>
          <Style TargetType="MenuItem" BasedOn="{StaticResource ToolbarMenuItem}" />
        </Menu.Resources>
        <MenuItem Header="プレイヤー領域">
          <MenuItem Header="動画サイズ: 50%" Command="{Binding ChangePlayerSizeFromPercentCommand}" CommandParameter="50"  />
          <MenuItem Header="動画サイズ: 75%" Command="{Binding ChangePlayerSizeFromPercentCommand}" CommandParameter="75"  />
          <MenuItem Header="動画サイズ: 100%" Command="{Binding ChangePlayerSizeFromPercentCommand}" CommandParameter="100"  />
          <MenuItem Header="動画サイズ: 150%" Command="{Binding ChangePlayerSizeFromPercentCommand}" CommandParameter="150"  />
          <MenuItem Header="動画サイズ: 200%" Command="{Binding ChangePlayerSizeFromPercentCommand}" CommandParameter="200" />
          <Separator />
          <MenuItem Header="動画サイズ: 公式サイズ(16:9)" Command="{Binding ChangePlayerSizeFromOfficial16x9Command}"/>
          <MenuItem Header="動画サイズ: 公式サイズ(4:3)" Command="{Binding ChangePlayerSizeFromOfficial4x3Command}"/>
          <Separator />
          <MenuItem Header="フルスクリーン" Command="{Binding ChangeFullScreenCommand}" />
          <Separator />
          <MenuItem Header="プレイヤー領域をリセット" Command="{Binding ResetPlayerAreaCommand}" CommandParameter="200" />
        </MenuItem>
      </Menu>

    </ToolBar>

    <StatusBar DockPanel.Dock="Bottom" Visibility="{Binding IsNormalWindow, Converter={StaticResource BooleanToVisibilityConverter}}" >
      <StatusBar.Resources>
        <Style TargetType="app_view_controls:LoadStateNavigator">
          <Setter Property="LoadedToVisibility" Value="Visible" />
          <Setter Property="Width" Value="10" />
          <Setter Property="Height" Value="10" />
        </Style>
      </StatusBar.Resources>
      <StatusBarItem DockPanel.Dock="Right" WindowChrome.ResizeGripDirection="BottomRight" Margin="0" Padding="0" VerticalAlignment="Bottom">
        <StatusBarItem.Style>
          <Style TargetType="StatusBarItem">
            <Style.Triggers>
              <DataTrigger Binding="{Binding State}" Value="Maximized">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>

              <!-- フルスクリーンはそもそもステータスバーが消えるので考慮しない -->

            </Style.Triggers>
            <Setter Property="Visibility" Value="Visible" />
          </Style>
        </StatusBarItem.Style>
        <ResizeGrip />
      </StatusBarItem>
      <ToggleButton x:Name="switchInformation">
        <ToggleButton.Style>
          <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsNormalWindow}" Value="True">
                <Setter Property="IsChecked" Value="{Binding PlayerShowDetailArea}" />
              </DataTrigger>
              <DataTrigger Binding="{Binding IsNormalWindow}" Value="False">
                <Setter Property="IsChecked" Value="False" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ToggleButton.Style>
        <Canvas Style="{StaticResource StatePanel}">
          <Viewbox Style="{StaticResource SmallIconBox}">
            <Canvas Style="{StaticResource IconCanvas-24x24}">
              <!-- https://materialdesignicons.com/icon/information-outline -->
              <Path Data="M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z" Style="{StaticResource SmallDefaultIconPath}" />
            </Canvas>
          </Viewbox>
          <app_view_controls:LoadStateNavigator LoadState="{Binding InformationLoadState}" Style="{StaticResource StateControl}" />
        </Canvas>
      </ToggleButton>
      <TextBlock>
        <TextBlock>[</TextBlock>
        <TextBlock Text="{Binding PlayerState, Mode=OneWay}"/>
        <TextBlock>]</TextBlock>
      </TextBlock>
      <Viewbox ToolTip="酷使するプレイヤーウィンドウ！" Style="{StaticResource SmallIconBox}" Visibility="{Binding IsWorkingPlayer.Value, Converter={StaticResource BooleanToVisibilityConverter}}">
        <Viewbox.Effect>
          <DropShadowEffect Color="{DynamicResource WindowColor}" ShadowDepth="0" BlurRadius="2" />
        </Viewbox.Effect>
        <Canvas Style="{StaticResource IconCanvas-24x24}">
          <Path Data="M12,15C7.58,15 4,16.79 4,19V21H20V19C20,16.79 16.42,15 12,15M8,9A4,4 0 0,0 12,13A4,4 0 0,0 16,9M11.5,2C11.2,2 11,2.21 11,2.5V5.5H10V3C10,3 7.75,3.86 7.75,6.75C7.75,6.75 7,6.89 7,8H17C16.95,6.89 16.25,6.75 16.25,6.75C16.25,3.86 14,3 14,3V5.5H13V2.5C13,2.21 12.81,2 12.5,2H11.5Z" Style="{StaticResource SmallAccentIconPath}" />
        </Canvas>
      </Viewbox>
      <Canvas Style="{StaticResource StatePanel}">
        <!--<Image Source="/Resources/Service/Smile/Video/Player/ImageState.png" Style="{StaticResource ButtonImage}" />-->
        <Viewbox Style="{StaticResource SmallIconBox}">
          <Canvas Style="{StaticResource IconCanvas-24x24}">
            <!-- https://materialdesignicons.com/icon/image -->
            <Path Data="M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z" Style="{StaticResource SmallDefaultIconPath}" />
          </Canvas>
        </Viewbox>
        <app_view_controls:LoadStateNavigator LoadState="{Binding ThumbnailLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <Canvas Style="{StaticResource StatePanel}">
        <Viewbox Style="{StaticResource SmallIconBox}">
          <Canvas Style="{StaticResource IconCanvas-24x24}">
            <!-- https://materialdesignicons.com/icon/comment-outline -->
            <Path Data="M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10Z" Style="{StaticResource SmallDefaultIconPath}" />
          </Canvas>
        </Viewbox>
        <app_view_controls:LoadStateNavigator LoadState="{Binding CommentLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <Canvas Style="{StaticResource StatePanel}">
        <!--<Image Source="/Resources/Service/Smile/Video/Player/VideoState.png" Style="{StaticResource ButtonImage}" />-->
        <Viewbox Style="{StaticResource SmallIconBox}">
          <Canvas Style="{StaticResource IconCanvas-24x24}">
            <!-- https://materialdesignicons.com/icon/video -->
            <Path Data="M17,10.5V7A1,1 0 0,0 16,6H4A1,1 0 0,0 3,7V17A1,1 0 0,0 4,18H16A1,1 0 0,0 17,17V13.5L21,17.5V6.5L17,10.5Z" Style="{StaticResource SmallDefaultIconPath}" />
          </Canvas>
        </Viewbox>
        <app_view_controls:LoadStateNavigator LoadState="{Binding VideoLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <ContentControl>
        <ContentControl.Style>
          <Style TargetType="ContentControl">
            <Style.Triggers>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding UsingDmc.Value}" Value="False" />
                  <Condition Binding="{Binding IsEconomyMode}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ToolTip" Value="旧型式: エコノミー" />
                <Setter Property="Content">
                  <Setter.Value>
                    <Image Source="/Resources/Service/Smile/Video/Player/EconomyMode.png" Style="{StaticResource SmallIconImage}" />
                  </Setter.Value>
                </Setter>
              </MultiDataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding UsingDmc.Value}" Value="False" />
                  <Condition Binding="{Binding IsEconomyMode}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ToolTip" Value="旧型式: 通常画質" />
                <Setter Property="Content">
                  <Setter.Value>
                    <Image Source="/Resources/Service/Smile/Video/Player/NormalMode.png" Style="{StaticResource SmallIconImage}" />
                  </Setter.Value>
                </Setter>
              </MultiDataTrigger>
              <DataTrigger Binding="{Binding UsingDmc.Value}" Value="True">
                <Setter Property="ToolTip">
                  <Setter.Value>
                    <StackPanel>
                      <TextBlock FontWeight="Bold">新形式</TextBlock>
                      <TextBlock Margin="{StaticResource LeftMargin}">
                        <Run>画質:</Run>
                        <Run Text="{Binding DmcVideoSrc, Mode=OneWay}" />
                      </TextBlock>
                      <TextBlock Margin="{StaticResource LeftMargin}">
                        <Run>音声:</Run>
                        <Run Text="{Binding DmcAudioSrc, Mode=OneWay}" />
                      </TextBlock>
                    </StackPanel>
                  </Setter.Value>
                </Setter>
                <Setter Property="Content">
                  <Setter.Value>
                    <Image Source="/Resources/Service/Smile/Video/Player/DmcMode.png" Style="{StaticResource SmallIconImage}" />
                  </Setter.Value>
                </Setter>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>
      <TextBlock ToolTip="動画サイズ">
        <TextBlock>
          <TextBlock.Style>
            <Style TargetType="TextBlock">
              <Style.Triggers>
                <DataTrigger Binding="{Binding VideoLoadState}" Value="Loading">
                  <Setter Property="Text" Value="{Binding SecondsDownloadingSize, Converter={StaticResource HumanLikeByteConverter}, StringFormat=秒間DL: {0}}" />
                  <Setter Property="Visibility" Value="Visible" />
                </DataTrigger>
              </Style.Triggers>
              <Setter Property="Visibility" Value="Collapsed"/>
            </Style>
          </TextBlock.Style>
        </TextBlock>
        <TextBlock Text="{Binding RealVideoWidth, Mode=OneWay}" />
        <TextBlock>x</TextBlock>
        <TextBlock Text="{Binding RealVideoHeight, Mode=OneWay}" />
        </TextBlock>
      <ContentControl>
        <ContentControl.Style>
          <Style TargetType="ContentControl">
            <Style.Triggers>
              <DataTrigger Binding="{Binding InformationLoadState, Converter={StaticResource LoadStateIsLoadedConverter}}" Value="False">
                <Setter Property="Content">
                  <Setter.Value>
                    <TextBlock>動画情報未取得</TextBlock>
                  </Setter.Value>
                </Setter>
              </DataTrigger>
              <DataTrigger Binding="{Binding InformationLoadState, Converter={StaticResource LoadStateIsLoadedConverter}}" Value="True">
                <Setter Property="Content">
                  <Setter.Value>
                    <StackPanel Orientation="Horizontal">
                      <StackPanel.Resources>
                        <Style TargetType="TextBlock">
                          <Setter Property="Margin" Value="0,0,8,0" />
                        </Style>
                      </StackPanel.Resources>
                      <TextBlock Text="{Binding Information.FirstRetrieve, Mode=OneWay, StringFormat=投稿日時: {0:yyyy/MM/dd HH:mm:ss}}" />
                      <TextBlock Text="{Binding Information.ViewCounter, Mode=OneWay, StringFormat=再生数: {0:N0}}" />
                      <TextBlock Text="{Binding Information.CommentCounter, Mode=OneWay, StringFormat=コメント数: {0:N0}}" />
                      <TextBlock Text="{Binding Information.MylistCounter, Mode=OneWay, StringFormat=マイリスト数: {0:N0}}" />
                    </StackPanel>
                  </Setter.Value>
                </Setter>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>
    </StatusBar>

    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"  />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="{Binding InformationAreaLength.Value, Mode=TwoWay}" />
      </Grid.RowDefinitions>

      <Grid Grid.Row="0" VerticalAlignment="Stretch">
        <Grid.Style>
          <Style>
            <Setter Property="Grid.RowSpan" Value="1" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsChecked, ElementName=switchInformation}" Value="False">
                <Setter Property="Grid.RowSpan" Value="3" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="{Binding PlayerAreaLength.Value, Mode=TwoWay}" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="{Binding CommentAreaLength.Value, Mode=TwoWay}" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" x:Name="viewPlayer">
          <Grid.Style>
            <Style>
              <Style.Triggers>
                <DataTrigger Binding="{Binding PlayerShowCommentArea}" Value="False">
                  <Setter Property="Grid.ColumnSpan" Value="3" />
                </DataTrigger>
              </Style.Triggers>
              <Setter Property="Grid.ColumnSpan" Value="1" />
            </Style>
          </Grid.Style>
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>

          <Grid x:Name="viewMedia" Grid.Row="0">
            <Grid.Style>
              <Style TargetType="Grid">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding BackgroundKind}" Value="SimpleColor">
                    <Setter Property="Background" Value="{StaticResource SimpleBackgound}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding BackgroundKind}" Value="AutoColor">
                    <Setter Property="Background" Value="{StaticResource AutoBackground}" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>
            <vlc_wpf:VlcPlayer x:Name="player" EndBehavior="Nothing">
              <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonUp" >
                  <i:InvokeCommandAction Command="{Binding PlayerMouseClickCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseDoubleClick" >
                  <i:InvokeCommandAction Command="{Binding FullScreenCancelCommand}" />
                </i:EventTrigger>
              </i:Interaction.Triggers>
            </vlc_wpf:VlcPlayer>

            <Viewbox x:Name="layer" ClipToBounds="True" Stretch="Fill" Width="{Binding BaseWidth}" Height="{Binding BaseHeight}" Visibility="{Binding PlayerVisibleComment, Converter={StaticResource BooleanToVisibilityConverter}}">
              <Grid Width="{Binding CommentArea.Width, Mode=OneTime}" Height="{Binding CommentArea.Height, Mode=OneTime}" >
                <Canvas x:Name="normalCommentArea" />
                <Canvas x:Name="originalPosterCommentArea" />
                <Border
                  VerticalAlignment="Top"
                  Background="#80ffffff"
                  BorderBrush="{DynamicResource AccentBaseColorBrush}"
                  BorderThickness="4"
                  Width="{Binding CommentArea.Width, Mode=OneTime}"
                  Height="{Binding CommentEnabledHeight}"
                  Visibility="{Binding ShowEnabledCommentPreviewArea, Converter={StaticResource BooleanToVisibilityConverter}}"
                >
                  <TextBlock VerticalAlignment="Top" TextAlignment="Center" FontSize="40" Foreground="Black" Margin="{StaticResource TopMargin}">
                    <TextBlock.Effect>
                      <DropShadowEffect
                        BlurRadius="4"
                        Color="SteelBlue"
                        Direction="325"
                      />
                    </TextBlock.Effect>
                    コメント有効領域
                  </TextBlock>
                </Border>
              </Grid>
            </Viewbox>

          </Grid>

          <Grid VerticalAlignment="Bottom">
            <Grid.Style>
              <Style TargetType="Grid">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsNormalWindow}" Value="True">
                    <Setter Property="Grid.Row" Value="1" />
                    <Setter Property="Opacity" Value="1" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsNormalWindow}" Value="False">
                    <Setter Property="Grid.Row" Value="0" />
                    <Setter Property="Opacity" Value="0" />
                  </DataTrigger>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsNormalWindow}" Value="False" />
                      <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                      <BeginStoryboard>
                        <Storyboard>
                          <DoubleAnimation Duration="00:00:00.2" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                      </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                      <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                          <DoubleAnimation Duration="00:00:01" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                      </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="2*" />
              <ColumnDefinition Width="6*" />
              <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>

            <app_view_controls:Navigationbar
              x:Name="seekbar"
              Grid.Row="0"
              Grid.Column="0"
              Grid.ColumnSpan="3"
              VideoPosition="{Binding VideoPosition}"
              VideoLoadedSize="{Binding VideoLoadedSize}"
              VideoTotalSize="{Binding VideoTotalSize}"
              VolumeMinimum="{Binding VolumeMinimum, Mode=OneTime}"
              VolumeMaximum="{Binding VolumeMaximum, Mode=OneTime}"
              Volume="{Binding Volume}"
              PlayTime="{Binding PlayTime}"
              TotalTime="{Binding TotalTime}"
              PlayerState="{Binding PlayerState}"
              PlayCommand="{Binding PlayCommand}"
              StopCommand="{Binding StopCommand}"
              IsReplayChecked="{Binding ReplayVideo}"
              IsMute="{Binding IsMute}"
              WaitingFirstPlay="{Binding WaitingFirstPlay.Value}"
              IsAutoPlay="{Binding IsAutoPlay, Mode=OneWay}"
              IsUserOperationStop="{Binding UserOperationStop.Value}"
            >
              <app_view_controls:Navigationbar.Style>
                <Style TargetType="app_view_controls:Navigationbar">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsNormalWindow}" Value="False">
                      <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </app_view_controls:Navigationbar.Style>
              <app_view_controls:Navigationbar.ExstendsContent>
                <StackPanel Orientation="Horizontal">
                  <ToggleButton ToolTip="フルスクリーン" IsChecked="{Binding IsNormalWindow, Converter={StaticResource LogicalNotConverter}, Mode=OneWay}" Command="{Binding SwitchFullScreenCommand}">
                    <!--<Image Source="/Resources/Service/Smile/Video/Player/FullScreen.png" Style="{StaticResource ButtonImage}" />-->
                    <Viewbox Style="{StaticResource SmallIconBox}">
                      <Canvas Style="{StaticResource IconCanvas-24x24}">
                        <Path>
                          <Path.Resources>
                            <Style TargetType="Path" BasedOn="{StaticResource SmallDefaultIconPath}">
                              <Style.Triggers>
                                <DataTrigger Binding="{Binding IsNormalWindow}" Value="True">
                                  <Setter Property="Data" Value="{StaticResource Image_FullScreen}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsNormalWindow}" Value="False">
                                  <Setter Property="Data" Value="{StaticResource Image_FullScreen-Exit}" />
                                </DataTrigger>
                              </Style.Triggers>
                            </Style>
                          </Path.Resources>
                        </Path>
                      </Canvas>
                    </Viewbox>
                  </ToggleButton>
                  <Control Template="{StaticResource CommentTemplate}">
                    <Control.ToolTip>
                      <ToolTip>
                        <TextBlock>
                          <Run>コメント有効領域</Run>
                          <LineBreak />
                          <Run>コンテキストメニューで拡張操作</Run>
                        </TextBlock>
                      </ToolTip>
                    </Control.ToolTip>
                    <Control.ContextMenu>
                      <ContextMenu>
                        <MenuItem Header="投稿者コメントもコメント有効領域の制限対象にする" IsCheckable="True" IsChecked="{Binding IsEnabledOriginalPosterCommentArea}" />
                      </ContextMenu>
                    </Control.ContextMenu>
                  </Control>
                  <ToggleButton ToolTip="コメントリスト表示" IsChecked="{Binding PlayerShowCommentArea}">
                    <!--<Image Source="/Resources/Service/Smile/Video/Player/CommentList.png" Style="{StaticResource ButtonImage}" />-->
                    <Viewbox Style="{StaticResource SmallIconBox}">
                      <Canvas Style="{StaticResource IconCanvas-24x24}">
                        <!-- https://materialdesignicons.com/icon/comment-text-outline -->
                        <Path Data="M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10M6,7H18V9H6V7M6,11H15V13H6V11Z" Style="{StaticResource SmallDefaultIconPath}" />
                      </Canvas>
                    </Viewbox>
                  </ToggleButton>
                </StackPanel>
              </app_view_controls:Navigationbar.ExstendsContent>
              <app_view_controls:Navigationbar.SeekbarInnerFadeContent>
                <Border Visibility="{Binding ShowCommentChart, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Viewbox Stretch="Fill" SnapsToDevicePixels="True" >
                    <oxy:Plot PlotAreaBorderThickness="0" LegendBorderThickness="0" Background="Transparent" Width="{Binding ActualWidth, ElementName=seekbar}" Height="20" IsLegendVisible="False" Padding="0" BorderThickness="0" >
                      <oxy:Plot.Axes>
                        <oxy:LinearAxis IsAxisVisible="False" Position="Left" MajorGridlineStyle="None" />
                        <oxy:LinearAxis IsAxisVisible="False" Position="Bottom"/>
                      </oxy:Plot.Axes>
                      <oxy:Plot.Series>
                        <oxy:LineSeries Color="{DynamicResource Gray5}" ItemsSource="{Binding CommentChartList, Mode=OneWay}" StrokeThickness="1" />
                      </oxy:Plot.Series>
                    </oxy:Plot>
                  </Viewbox>
                </Border>
              </app_view_controls:Navigationbar.SeekbarInnerFadeContent>
            </app_view_controls:Navigationbar>

            <xctk:DropDownButton Grid.Row="1" Grid.Column="0">
              <xctk:DropDownButton.DropDownContent>
                <Border Padding="{StaticResource BasePadding}" Background="{DynamicResource WindowBackgroundBrush}">
                  <Border.Resources>
                    <Style TargetType="RadioButton" BasedOn="{StaticResource HorizontalRadioButton}" />
                  </Border.Resources>
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <Label Grid.Row="0" Grid.Column="0">サイズ</Label>
                    <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                      <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Small}}">少</RadioButton>
                      <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Medium}}">中</RadioButton>
                      <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Big}}">大</RadioButton>
                    </StackPanel>

                    <Label Grid.Row="1" Grid.Column="0">位置</Label>
                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
                      <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Top}}">上</RadioButton>
                      <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Normal}}">中</RadioButton>
                      <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Bottom}}">下</RadioButton>
                    </StackPanel>

                    <Label Grid.Row="2" Grid.Column="0">色</Label>
                    <ListBox Grid.Row="2" Grid.Column="1" Background="Transparent" BorderBrush="Transparent" ItemsSource="{Binding CommandColorItems}" SelectedItem="{Binding PostCommandColor}" >
                      <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                          <UniformGrid Columns="10">
                            <UniformGrid.Style>
                              <Style TargetType="UniformGrid">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Session.IsPremium}" Value="True">
                                    <Setter Property="Rows" Value="2" />
                                  </DataTrigger>
                                </Style.Triggers>
                                <Setter Property="Rows" Value="1" />
                              </Style>
                            </UniformGrid.Style>
                          </UniformGrid>
                        </ItemsPanelTemplate>
                      </ListBox.ItemsPanel>
                      <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                          <Setter Property="Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="ListBoxItem">
                                <ToggleButton IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected}">
                                  <Rectangle Width="16" Height="16">
                                    <Rectangle.Fill>
                                      <SolidColorBrush Color="{Binding}" />
                                    </Rectangle.Fill>
                                  </Rectangle>
                                </ToggleButton>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                      </ListBox.ItemContainerStyle>
                    </ListBox>


                    <Label Grid.Row="3" Grid.Column="0">コマンド</Label>
                    <CheckBox Grid.Row="3" Grid.Column="1" IsEnabled="{Binding IsEnabledPostAnonymous, Converter={StaticResource LogicalNotConverter}}" IsChecked="{Binding IsPostAnonymous}">184投稿</CheckBox>
                    <TextBox Grid.Row="4" Grid.Column="1" mamc:TextBoxHelper.ClearTextButton="True" mamc:TextBoxHelper.UseFloatingWatermark="True" mamc:TextBoxHelper.Watermark="先頭追加" Text="{Binding PostBeforeCommand, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="5" Grid.Column="1" mamc:TextBoxHelper.ClearTextButton="True" mamc:TextBoxHelper.UseFloatingWatermark="True" mamc:TextBoxHelper.Watermark="終端追加" Text="{Binding PostAfterCommand, UpdateSourceTrigger=PropertyChanged}" />

                    <Separator Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" />

                    <Label Grid.Row="7" Grid.Column="0" >生成コマンド</Label>
                    <ItemsControl Grid.Row="7" Grid.Column="1" ItemsSource="{Binding PostCommandItems}">
                      <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                          <StackPanel Orientation="Horizontal" VerticalAlignment="Center" />
                        </ItemsPanelTemplate>
                      </ItemsControl.ItemsPanel>
                      <ItemsControl.ItemTemplate>
                        <DataTemplate>
                          <StackPanel Orientation="Horizontal">
                            <Border x:Name="separator" Width="4" />
                            <TextBlock Text="{Binding}" />
                          </StackPanel>

                          <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                              <Setter Property="Visibility" TargetName="separator" Value="Collapsed"/>
                            </DataTrigger>
                          </DataTemplate.Triggers>
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                    </ItemsControl>
                  </Grid>
                </Border>
              </xctk:DropDownButton.DropDownContent>
              コマンド
            </xctk:DropDownButton>
            <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding PostCommentBody}"></TextBox>
            <Button Grid.Row="1" Grid.Column="2" Command="{Binding PostCommentCommand}">投稿</Button>

            <DockPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
              <DockPanel.Style>
                <Style TargetType="DockPanel">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding CommentInformation, Converter={StaticResource HasTextLengthConverter}}" Value="True">
                      <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                  </Style.Triggers>
                  <Setter Property="Visibility" Value="Collapsed" />
                </Style>
              </DockPanel.Style>
              <Button DockPanel.Dock="Left" Command="{Binding CloseCommentInformationCommand}">✗</Button>
              <!--<xctk:AutoSelectTextBox AutoSelectBehavior="OnFocus" IsReadOnly="True"  Text="{Binding CommentInformation}" />-->
              <TextBox mamc:TextBoxHelper.SelectAllOnFocus="True" IsReadOnly="True" Text="{Binding CommentInformation, Mode=OneWay}" />
            </DockPanel>

          </Grid>
        </Grid>

        <GridSplitter
          Grid.Row="0" Grid.Column="1"
          Style="{StaticResource DefaultVericalGridSplitter}"
          Visibility="{Binding PlayerShowCommentArea, Converter={StaticResource BooleanToVisibilityConverter}}"
        />

        <TabControl Grid.Row="0" Grid.Column="2" Visibility="{Binding PlayerShowCommentArea, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{StaticResource FinderTab}">
          <TabItem Header="コメント">
            <DockPanel>
              <DockPanel DockPanel.Dock="Top">
                <DockPanel DockPanel.Dock="Top">
                  <CheckBox DockPanel.Dock="Left" IsChecked="{Binding IsAutoScroll}">自動スクロール</CheckBox>
                  <CheckBox DockPanel.Dock="Left" IsChecked="{Binding IsEnabledSharedNoGood}">共有NG</CheckBox>
                  <TextBlock DockPanel.Dock="Left" Margin="2,0,0,0">低</TextBlock>
                  <TextBlock DockPanel.Dock="Right">高</TextBlock>
                  <Slider VerticalAlignment="Center" Minimum="-3000" Maximum="-1" LargeChange="100" IsEnabled="{Binding IsEnabledSharedNoGood}" Value="{Binding SharedNoGoodScore}" ToolTip="{Binding SharedNoGoodScore}" />
                </DockPanel>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.All}}">
                  <TextBlock Text="{Binding CommentListCount, Mode=OneWay, StringFormat=全て({0})}" />
                </RadioButton>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.OriginalPoster}}">
                  <RadioButton.Style>
                    <Style TargetType="RadioButton" BasedOn="{StaticResource UserSelect}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding OriginalPosterCommentListCount}" Value="0">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </RadioButton.Style>
                  <TextBlock Text="{Binding OriginalPosterCommentListCount, Mode=OneWay, StringFormat=投稿者({0})}" />
                </RadioButton>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.UserId}}">
                  <RadioButton.Style>
                    <Style TargetType="RadioButton" BasedOn="{StaticResource UserSelect}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding CommentListCount}" Value="0">
                          <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </RadioButton.Style>
                  <TextBlock>ユーザー</TextBlock>
                </RadioButton>
                <TextBlock DockPanel.Dock="Right">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding FilteringCommentType}" Value="UserId">
                          <Setter Property="Text" Value="{Binding CommentItems.CanItemChange, Mode=OneWay, StringFormat=({0})}" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <ComboBox
                  IsEditable="True"
                  Text="{Binding FilteringUserId, Delay=500, UpdateSourceTrigger=PropertyChanged}"
                  ItemsSource="{Binding FilteringUserList}"
                  IsEnabled="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.UserId}}"
                >
                  <ComboBox.ItemTemplate>
                    <DataTemplate>
                      <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding UserId, Mode=OneTime}"/>
                        <TextBlock>(</TextBlock>
                        <TextBlock Text="{Binding UserKind, Mode=OneTime}" />
                        <TextBlock>:</TextBlock>
                        <TextBlock Text="{Binding Count, Mode=OneTime}" />
                        <TextBlock>)</TextBlock>
                      </StackPanel>
                    </DataTemplate>
                  </ComboBox.ItemTemplate>
                </ComboBox>
              </DockPanel>
              <Grid DockPanel.Dock="Bottom">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="4*" />
                  <ColumnDefinition Width="6*" />
                </Grid.ColumnDefinitions>
                <CheckBox Grid.Column="0" VerticalAlignment="Center" IsChecked="{Binding IsEnabledDisplayCommentLimit}">
                  <TextBlock>
                    <TextBlock>表示制限</TextBlock>
                    <TextBlock>(</TextBlock>
                    <TextBlock Text="{Binding ShowingCommentList.Count, Mode=OneWay}" />
                    <TextBlock>
                      <TextBlock.Style>
                        <Style TargetType="TextBlock">
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsEnabledDisplayCommentLimit}" Value="True">
                              <Setter Property="Text" Value="{Binding DisplayCommentLimitCount, StringFormat=/{0}}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </TextBlock.Style>
                    </TextBlock>
                    <TextBlock>)</TextBlock>
                  </TextBlock>
                </CheckBox>
                <DockPanel Grid.Column="1">
                  <TextBlock DockPanel.Dock="Left" VerticalAlignment="Center" >少</TextBlock>
                  <TextBlock DockPanel.Dock="Right" VerticalAlignment="Center">多</TextBlock>
                  <Slider
                    VerticalAlignment="Center"
                    Minimum="1"
                    Maximum="50"
                    LargeChange="5"
                    Value="{Binding DisplayCommentLimitCount}"
                    IsEnabled="{Binding IsEnabledDisplayCommentLimit}"
                  />
                </DockPanel>
              </Grid>

              <Grid x:Name="listComment">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" >
                  <Grid.Resources>
                    <Style TargetType="Border">
                      <Setter Property="Background" Value="{DynamicResource GrayBrush3}" />
                      <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush4}" />
                      <Setter Property="TextElement.Foreground" Value="{DynamicResource WhiteBrush}" />
                      <Setter Property="BorderThickness" Value="1" />
                      <Setter Property="Padding" Value="1" />
                    </Style>
                    <Style TargetType="TextBlock">
                      <Setter Property="HorizontalAlignment" Value="Center" />
                    </Style>
                  </Grid.Resources>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Border Grid.Column="0" MinWidth="{StaticResource CommentShowTimestampMinWidth}">
                    <TextBlock>時間</TextBlock>
                  </Border>
                  <Border Grid.Column="1">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>

                      <TextBlock Grid.Column="0">コメント</TextBlock>
                      <CheckBox Grid.Column="1" Content="投稿時間の表示" Foreground="{DynamicResource WhiteBrush}" IsChecked="{Binding PlayerShowPostTimestamp}" />
                    </Grid>
                  </Border>
                </Grid>

                <Grid Grid.Row="1">
                  <!--
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*" />
                    <ColumnDefinition Width="8*" />
                  </Grid.ColumnDefinitions>
                  -->

                  <ListBox
                    x:Name="commentView"
                    VirtualizingPanel.ScrollUnit="Item"
                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    HorizontalContentAlignment="Stretch"
                    SelectedItem="{Binding SelectedComment}"
                    ItemsSource="{Binding CommentItems}"
                  >
                    <ListBox.ItemContainerStyle>
                      <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding NowShowing}" Value="True">
                            <DataTrigger.EnterActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <!-- テーマの随時適用はすぐには無理っすね -->
                                  <ColorAnimation
                                    Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                    From="Transparent"
                                    To="{StaticResource AccentColor}"
                                    Duration="00:00:00.2"
                                    AutoReverse="False"
                                    FillBehavior="HoldEnd"
                                  />
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <ColorAnimation
                                    Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                    To="Transparent"
                                    Duration="00:00:01"
                                    AutoReverse="False"
                                  />
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.ExitActions>
                          </DataTrigger>
                          <DataTrigger Binding="{Binding Approval}" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SemiTransparentGreyBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource SemiTransparentWhiteBrush}" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                      <DataTemplate>
                        <DockPanel>
                          <DockPanel DockPanel.Dock="Left" MinWidth="{StaticResource CommentShowTimestampMinWidth}">
                            <Rectangle DockPanel.Dock="Left" StrokeThickness="1" RadiusX="2" RadiusY="2" Width="{StaticResource CommentShowColorSize}" Height="{StaticResource CommentShowColorSize}">
                              <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding ForegroundColor}" />
                              </Rectangle.Fill>
                              <Rectangle.Stroke>
                                <SolidColorBrush Color="{Binding OutlineColor}" />
                              </Rectangle.Stroke>
                            </Rectangle>
                            <TextBlock Margin="3,0" Text="{Binding ElapsedTime, Converter={StaticResource TimespanToHMFormatConverter}}" />
                          </DockPanel>

                          <TextBlock DockPanel.Dock="Right" Text="{Binding Timestamp, StringFormat={}{0:yyy/MM/dd HH:mm:ss}}" Visibility="{Binding DataContext.PlayerShowPostTimestamp, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType=Window}}" />

                          <TextBlock TextTrimming="CharacterEllipsis">
                            <TextBlock.Style>
                              <Style TargetType="TextBlock">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Approval}" Value="False">
                                    <Setter Property="Text" Value="{Binding NoApprovalRemark.Value, StringFormat=&lt;{0}としてマークされました&gt;}" />
                                    <!--<Setter Property="TextDecorations">
                                      <Setter.Value>
                                        <TextDecorationCollection>
                                          <TextDecoration Location="Strikethrough" />
                                        </TextDecorationCollection>
                                      </Setter.Value>
                                    </Setter>-->
                                  </DataTrigger>
                                </Style.Triggers>

                                <Setter Property="Text" Value="{Binding ContentSingleLine}" />
                              </Style>
                            </TextBlock.Style>
                          </TextBlock>

                        </DockPanel>
                      </DataTemplate>
                    </ListBox.ItemTemplate>
                  </ListBox>

                </Grid>

                <mamc:Flyout
                  x:Name="detailComment"
                  Grid.Row="0"
                  Grid.RowSpan="2"
                  Header="コメント詳細"
                  Visibility="Hidden"
                  Padding="4"
                  BorderThickness="1"
                  Position="Right"
                  BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                  Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                  IsOpen="{Binding IsOpenCommentDetail}"
                  Width="{Binding ActualWidth, ElementName=listComment}"
                >
                  <Grid>
                    <!--<ListBox
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      BorderBrush="Transparent"
                      Background="Transparent"
                    >
                      <ListBox.Resources>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                          <Setter Property="DockPanel.Dock" Value="Left" />
                          <Setter Property="Width" Value="80" />
                          <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                          <Setter Property="IsReadOnly" Value="True" />
                          <Setter Property="IsReadOnlyCaretVisible" Value="True" />
                          <Setter Property="Background" Value="Transparent" />
                          <Setter Property="BorderBrush" Value="Transparent" />
                          <Setter Property="VerticalContentAlignment" Value="Center" />
                        </Style>
                      </ListBox.Resources>
                      <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                          <Setter Property="Focusable" Value="False"/>
                          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                      </ListBox.ItemContainerStyle>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>表示時間</TextBlock>
                          <TextBox Text="{Binding SelectedComment.ElapsedTime, Mode=OneWay}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>投稿時間</TextBlock>
                          <TextBox Text="{Binding SelectedComment.Timestamp, Mode=OneWay, StringFormat={}{0:yyy/MM/dd HH:mm:ss}}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>スコア</TextBlock>
                          <TextBox Text="{Binding SelectedComment.Score, Mode=OneWay}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>ユーザー種別</TextBlock>
                          <TextBox Text="{Binding SelectedComment.UserKind, Mode=OneWay}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>ユーザーID</TextBlock>
                          <TextBox Text="{Binding SelectedComment.UserId, Mode=OneWay}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <DockPanel>
                          <TextBlock>コマンド</TextBlock>
                          <TextBox Text="{Binding SelectedComment.CommandsText, Mode=OneWay}"/>
                        </DockPanel>
                      </ListBoxItem>
                      <ListBoxItem>
                        <ListBoxItem.Style>
                          <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding SelectedComment.Approval}" Value="False">
                                <Setter Property="Visibility" Value="Visible" />
                              </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Visibility" Value="Collapsed" />
                          </Style>
                        </ListBoxItem.Style>
                        <DockPanel>
                          <TextBlock>表示不許可</TextBlock>
                          <TextBox Text="{Binding SelectedComment.NoApprovalDetail.Value, Mode=OneWay}" />
                        </DockPanel>
                      </ListBoxItem>
                      <Separator/>
                      <ListBoxItem>
                        <TextBox Height="Auto" Text="{Binding SelectedComment.Content, Mode=OneWay}"/>
                      </ListBoxItem>
                    </ListBox>-->
                    <ScrollViewer>
                      <Grid>
                        <Grid.Resources>
                          <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="VerticalAlignment" Value="Center" />
                          </Style>
                          <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Style.Triggers>
                              <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property = "BorderBrush" Value="Transparent"/>
                              </Trigger>
                              <Trigger Property="IsFocused" Value="true">
                                <Setter Property = "BorderBrush" Value="Transparent"/>
                              </Trigger>
                            </Style.Triggers>
                            <Setter Property="IsReadOnly" Value="True" />
                            <Setter Property="IsReadOnlyCaretVisible" Value="True" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                          </Style>
                          <Style x:Key="FilteringGrid" TargetType="Grid">
                            <Setter Property="cttn_sl_view_attached:GridHelpers.ColumnCount" Value="2" />
                            <Setter Property="cttn_sl_view_attached:GridHelpers.StarColumns" Value="0" />
                          </Style>
                          <DataTemplate x:Key="FilterIcon">
                            <Viewbox Margin="4" Style="{StaticResource MinimumIconBox}">
                              <Canvas Style="{StaticResource IconCanvas-24x24}">
                                <Path Data="{StaticResource Image_Filter}" Style="{StaticResource MinimumDefaultIconPath}" />
                              </Canvas>
                            </Viewbox>
                          </DataTemplate>

                          <sys:String x:Key="GlobalFilter">全ての動画でフィルタ設定するには Shiftキー を同時押ししてください</sys:String>

                          <Style x:Key="FilteringDropDownButton" BasedOn="{StaticResource {x:Type mamc:DropDownButton}}" TargetType="mamc:DropDownButton">
                            <Setter Property="ToolTip" Value="{StaticResource GlobalFilter}" />
                            <Setter Property="ArrowVisibility" Value="Collapsed" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="ButtonStyle" Value="{DynamicResource MetroCircleButtonStyle}" />
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource MetroCircleFocusVisual}" />
                            <Setter Property="Width" Value="{StaticResource NormalIconWidth}" />
                            <Setter Property="Height" Value="{StaticResource NormalIconHeight}" />
                          </Style>
                          <Style x:Key="FilteringButton" TargetType="Button" BasedOn="{StaticResource MetroCircleButtonStyle}">
                            <Setter Property="ToolTip" Value="{StaticResource GlobalFilter}" />
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource MetroCircleFocusVisual}" />
                            <Setter Property="Width" Value="{StaticResource NormalIconWidth}" />
                            <Setter Property="Height" Value="{StaticResource NormalIconHeight}" />
                          </Style>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0">表示時間</TextBlock>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding SelectedComment.ElapsedTime, Mode=OneWay}"/>
                        <!--<Button Grid.Row="0" Grid.Column="2">add filter</Button>-->

                        <TextBlock Grid.Row="1" Grid.Column="0">投稿時間</TextBlock>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedComment.Timestamp, Mode=OneWay, StringFormat={}{0:yyy/MM/dd HH:mm:ss}}"/>

                        <TextBlock Grid.Row="2" Grid.Column="0">スコア</TextBlock>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedComment.Score, Mode=OneWay}"/>

                        <Grid Grid.Row="3" Grid.Column="0" Style="{StaticResource FilteringGrid}">
                          <TextBlock Grid.Column="0">ユーザーID</TextBlock>
                          <Button Grid.Column="1" Command="{Binding SetFilteringUserIdCommand}" Style="{StaticResource FilteringButton}" >
                            <ContentControl ContentTemplate="{StaticResource FilterIcon}" />
                          </Button>
                        </Grid>
                        <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding SelectedComment.UserId, Mode=OneWay}"/>

                        <Grid Grid.Row="4" Grid.Column="0" Style="{StaticResource FilteringGrid}">
                          <TextBlock Grid.Column="0">コマンド</TextBlock>
                          <mamc:DropDownButton Grid.Column="1" ArrowVisibility="Collapsed" Style="{StaticResource FilteringDropDownButton}" ItemsSource="{Binding SelectedComment.Commands}" >
                            <mamc:DropDownButton.Resources>
                              <!-- ItemContainerStyle でやると バインドエラー4 で死ぬ-->
                              <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Command" Value="{Binding DataContext.SetFilteringCommandCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
                                <Setter Property="CommandParameter" Value="{Binding}" />
                              </Style>
                            </mamc:DropDownButton.Resources>
                            <!--<mamc:DropDownButton.ItemContainerStyle>
                              <Style TargetType="MenuItem" BasedOn="{StaticResource MetroMenuItem}">
                                <Setter Property="Command" Value="{Binding }" />
                                <Setter Property="CommandParameter" Value="{Binding}" />
                              </Style>
                            </mamc:DropDownButton.ItemContainerStyle>-->
                            <mamc:DropDownButton.Content>
                              <ContentControl ContentTemplate="{StaticResource FilterIcon}" />
                            </mamc:DropDownButton.Content>
                          </mamc:DropDownButton>
                        </Grid>
                        <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding SelectedComment.CommandsText, Mode=OneWay}"/>

                        <TextBlock Grid.Row="5" Grid.Column="0" Visibility="{Binding SelectedComment.NoApproval, Converter={StaticResource BooleanToVisibilityConverter}}">表示不許可</TextBlock>
                        <TextBox Grid.Row="5" Grid.Column="1"  Visibility="{Binding SelectedComment.NoApproval, Converter={StaticResource BooleanToVisibilityConverter}}" Text="{Binding SelectedComment.NoApprovalDetail.Value, Mode=OneWay}" />

                        <Grid Grid.Row="6" Grid.Column="0" Style="{StaticResource FilteringGrid}">
                          <TextBlock Grid.Column="0">コメント</TextBlock>
                          <Button Grid.Column="1" Command="{Binding SetFilteringCommentCommand}" Style="{StaticResource FilteringButton}" >
                            <ContentControl ContentTemplate="{StaticResource FilterIcon}" />
                          </Button>
                        </Grid>
                        <TextBox Grid.Row="6" Grid.RowSpan="2" Grid.Column="1" Height="Auto" VerticalAlignment="Top" Text="{Binding SelectedComment.Content, Mode=OneWay}"/>

                      </Grid>
                    </ScrollViewer>
                  </Grid>
                </mamc:Flyout>
              </Grid>
            </DockPanel>
          </TabItem>
          <TabItem Header="フィルタ">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <StackPanel Grid.Row="0">
                <CheckBox IsChecked="{Binding IsEnabledOriginalPosterFilering}" Style="{StaticResource VerticalCheckBox}">投稿者コメントもフィルタ対象にする</CheckBox>
              </StackPanel>
              <TabControl Grid.Row="1">
                <TabItem Header="この動画">
                  <app_view_controls_service_smile_video_setting:SmileVideoCommentFiltering x:Name="localFilter">
                    <i:Interaction.Triggers>
                      <i:EventTrigger EventName="FilteringChanged">
                        <i:InvokeCommandAction Command="{Binding ChangedFilteringCommand}" />
                      </i:EventTrigger>
                    </i:Interaction.Triggers>
                  </app_view_controls_service_smile_video_setting:SmileVideoCommentFiltering>
                </TabItem>
                <TabItem VerticalContentAlignment="Stretch">
                  <TabItem.Header>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                      <!--<TextBlock>全ての動画</TextBlock>
                    <ToggleButton Margin="4,0,0,0" FontSize="9" Content="使用" ToolTip="全体NG設定を有効にします" IsChecked="{Binding IsEnabledGlobalCommentFilering}" />-->
                      <CheckBox Margin="0,0,4,0" ToolTip="全体フィルタ設定を有効にします" IsChecked="{Binding IsEnabledGlobalCommentFilering}" />
                      <TextBlock>全ての動画</TextBlock>
                    </StackPanel>
                  </TabItem.Header>
                  <app_view_controls_service_smile_video_setting:SmileVideoCommentFiltering Filtering="{Binding GlobalCommentFilering}">
                    <i:Interaction.Triggers>
                      <i:EventTrigger EventName="FilteringChanged">
                        <i:InvokeCommandAction Command="{Binding ChangedFilteringCommand}" />
                      </i:EventTrigger>
                    </i:Interaction.Triggers>
                  </app_view_controls_service_smile_video_setting:SmileVideoCommentFiltering>
                </TabItem>
              </TabControl>
            </Grid>
          </TabItem>
          <TabItem Header="設定">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>

              <Button Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Command="{Binding ResetCommentSettingCommand}">コメント設定の初期化</Button>

              <Separator Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" />

              <Label Grid.Row="2" Grid.Column="0">フォント</Label>
              <app_view_controls:FontSelectControl
                Grid.Row="2" Grid.Column="1"
                FamilyName="{Binding CommentFontFamily}"
                IsEnabledBold="True"
                IsEnabledItalic="True"
                IsBold="{Binding CommentFontBold}"
                IsItalic="{Binding CommentFontItalic}"
                Size="{Binding CommentFontSize}"
                SizeMinimum="10"
                SizeMaximum="50"
              />

              <Label Grid.Row="3" Grid.Column="0">透明度</Label>
              <Slider VerticalAlignment="Center" Grid.Row="3" Grid.Column="1" Minimum="0.1" Maximum="1" LargeChange="0.1"  Value="{Binding CommentFontAlpha}"/>

              <Label Grid.Row="4" Grid.Column="0">表示時間</Label>
              <!-- TODO: UI側で制限 -->
              <Slider VerticalAlignment="Center" Grid.Row="4" Grid.Column="1" Minimum="1000" Maximum="10000" LargeChange="1000" Value="{Binding CommentShowTime, Converter={StaticResource TimeSpanToMillisecondConverter}}" />

              <Label Grid.Row="5" Grid.Column="0">フレームレート</Label>
              <Slider VerticalAlignment="Center" Grid.Row="5" Grid.Column="1" LargeChange="1" Minimum="{x:Static app:Constants.FrameworkFpsMinimum}" Maximum="{x:Static app:Constants.FrameworkFpsMaximum}" Value="{Binding CommentFps}">
                <Slider.ToolTip>
                  <TextBlock>
                    <Run>FPS: </Run>
                    <Run Text="{Binding CommentFps, Mode=OneWay}" />
                  </TextBlock>
                </Slider.ToolTip>
              </Slider>

              <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" IsChecked="{Binding CommentConvertPairYenSlash}">
                <TextBlock TextWrapping="Wrap">コメント内の/と対になる円記号(&#xA5;)をバックスラッシュ(&#x29F5;)に変換</TextBlock>
              </CheckBox>

              <Label Grid.Row="7" Grid.Column="0" Content="テキスト描画" DockPanel.Dock="Left" />
              <StackPanel Grid.Row="8" Grid.Column="1" Orientation="Horizontal">
                <RadioButton VerticalAlignment="Center" Content="影付き" IsChecked="{Binding PlayerTextShowKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define:TextShowKind.Shadow}}" />
                <RadioButton VerticalAlignment="Center" Content="縁取り" IsChecked="{Binding PlayerTextShowKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define:TextShowKind.Outline}}" />
              </StackPanel>
            </Grid>
          </TabItem>
        </TabControl>
      </Grid>

      <GridSplitter
        Grid.Row="1"
        Height="4"
        Style="{StaticResource DefaultHorizonGridSplitter}"
        Visibility="{Binding IsChecked, ElementName=switchInformation, Converter={StaticResource BooleanToVisibilityConverter}}"
      />

      <TabControl
        Grid.Row="2"
        TabStripPlacement="Left"
        Visibility="{Binding IsChecked, ElementName=switchInformation, Converter={StaticResource BooleanToVisibilityConverter}}"
      >
        <TabItem Header="動画情報" IsSelected="{Binding IsSelectedInformation}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0">
              <Image Style="{StaticResource ThumbnailImage}" Source="{Binding ThumbnailImage}" />

              <!--<TextBlock Text="{Binding UserName}" />-->
              <Grid>
                <app_view_controls:LoadStateNavigator LoadState="{Binding InformationLoadState}" />
                <Button Style="{StaticResource Hyperlink}" Width="{StaticResource ImageWidth}" Command="{Binding OpenUserOrChannelIdCommand}">
                  <TextBlock TextTrimming="CharacterEllipsis">
                    <TextBlock.Resources>
                      <Style TargetType="TextBlock">
                        <Style.Triggers>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition Binding="{Binding InformationLoadState}" Value="Loaded" />
                              <Condition Binding="{Binding IsChannelVideo}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Text" Value="{Binding UserName, Mode=OneWay}" />
                          </MultiDataTrigger>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition Binding="{Binding InformationLoadState}" Value="Loaded" />
                              <Condition Binding="{Binding IsChannelVideo}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Text" Value="{Binding ChannelName, Mode=OneWay}" />
                          </MultiDataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Resources>
                  </TextBlock>
                </Button>
              </Grid>

            </StackPanel>

            <Grid Grid.Row="1"  Grid.Column="1" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                  <!--<Image Source="/Resources/SearchType/Tag.png" Style="{StaticResource ItemImage}" />-->
                  <Viewbox DockPanel.Dock="Left" Style="{StaticResource SmallItemBox}">
                    <Canvas Style="{StaticResource IconCanvas-24x24}" >
                      <Path Data="{StaticResource Image_Tag}" Style="{StaticResource SmallDefaultIconPath}" />
                    </Canvas>
                  </Viewbox>
                  <TextBlock Text="登録タグ" Margin="2,0,8,0" VerticalAlignment="Center" />
                </StackPanel>
                <ItemsControl Grid.Column="1" ItemsSource="{Binding TagItems}">
                  <ItemsControl.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                      <Setter Property="FontSize" Value="{StaticResource FontBaseSize}" />
                      <Setter Property="VerticalAlignment" Value="Center" />
                    </Style>
                    <Style TargetType="Viewbox" BasedOn="{StaticResource MinimumIconBox}">
                      <Setter Property="VerticalAlignment" Value="Center" />
                    </Style>
                    <!--<Style TargetType="Image">
                      <Setter Property="VerticalAlignment" Value="Center" />
                      <Setter Property="Width" Value="12" />
                      <Setter Property="Height" Value="12" />
                    </Style>-->
                  </ItemsControl.Resources>
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                  <ItemsControl.ItemTemplate>
                    <DataTemplate>
                      <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <Border x:Name="separator" Width="{StaticResource SeparatorWidth}" />

                        <!--<TextBlock Visibility="{Binding IsCategory, Converter={StaticResource BooleanToVisibilityConverter}}" >[C]</TextBlock>-->
                        <!--<Image Source="/Resources/Service/Smile/Video/Player/Lock.png" Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibilityConverter}}" />-->
                        <Viewbox Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{StaticResource {x:Type Viewbox}}">
                          <Canvas Style="{StaticResource IconCanvas-24x24}" >
                            <Path Data="{StaticResource Image_Lock}" Style="{StaticResource MinimumDefaultIconPath}" />
                          </Canvas>
                        </Viewbox>
                        <Button
                          Style="{StaticResource Hyperlink}"
                          Command="{Binding DataContext.SearchTagCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                          CommandParameter="{Binding}"
                        >
                          <TextBlock Text="{Binding TagName, Mode=OneTime}" />
                        </Button>
                        <Button Style="{StaticResource Hyperlink}" Margin="{StaticResource IndependentHorizonMargin}" Command="{Binding DataContext.OpenPediaCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}" Visibility="{Binding ExistPedia, Converter={StaticResource BooleanToVisibilityConverter}}">
                          <Viewbox Style="{StaticResource {x:Type Viewbox}}">
                            <Canvas Style="{StaticResource IconCanvas-24x24}" >
                              <Path Data="{StaticResource Image_Book}" Style="{StaticResource MinimumLinkIconPath}" />
                            </Canvas>
                          </Viewbox>
                        </Button>
                      </StackPanel>

                      <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                          <Setter Property="Visibility" TargetName="separator" Value="Collapsed"/>
                        </DataTrigger>
                      </DataTemplate.Triggers>
                    </DataTemplate>
                  </ItemsControl.ItemTemplate>
                </ItemsControl>
              </Grid>
              <Grid Grid.Row="1">
                <FlowDocumentScrollViewer Style="{StaticResource PlayerDescriptionDocument}">
                  <i:Interaction.Behaviors>
                    <app_view_attachment:HtmlDescriptionBehavior 
                      HtmlSource="{Binding Information.DescriptionHtmlSource}" 
                      DescriptionProcessor="{Binding DescriptionProcessor, Mode=OneWay}"
                    />
                  </i:Interaction.Behaviors>
                  <!--<FlowDocumentScrollViewer.Resources>
                    <Style TargetType="Run">
                      <Setter Property="BaselineAlignment" Value="Center"/>
                    </Style>
                  </FlowDocumentScrollViewer.Resources>
                  <FlowDocument
                    FontSize="11.5"
                    PagePadding="10, 2, 10, 0"
                  />-->
                </FlowDocumentScrollViewer>
              </Grid>
            </Grid>
          </Grid>
        </TabItem>
        <TabItem Header="関連動画">
          <ScrollViewer>
            <ItemsControl ItemsSource="{Binding RelationVideoItems}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <UniformGrid />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Button Style="{StaticResource Hyperlink}" Command="{Binding DataContext.OpenRelationVideo, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}" Width="{StaticResource VideoInfoWidth}" ToolTip="{Binding Title, Mode=OneTime}">
                    <StackPanel>
                      <Grid>
                        <app_view_controls:LoadStateNavigator ShowStateText="True" LoadState="{Binding ThumbnailLoadState}" />
                        <Image Style="{StaticResource ThumbnailImage}" Source="{Binding ThumbnailImage}" />
                      </Grid>
                      <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding Title, Mode=OneTime}" />
                    </StackPanel>
                  </Button>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </TabItem>
        <TabItem Header="market" IsEnabled="False">
          <ScrollViewer>
            <ItemsControl ItemsSource="{Binding MarketItems}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <UniformGrid />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <StackPanel>
                    <TextBlock>market item</TextBlock>
                  </StackPanel>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </TabItem>
      </TabControl>
    </Grid>
  </DockPanel>
</mamc:MetroWindow>
