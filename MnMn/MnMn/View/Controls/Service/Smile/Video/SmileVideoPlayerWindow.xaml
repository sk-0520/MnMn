<Window
  x:Class="ContentTypeTextNet.MnMn.MnMn.View.Controls.Service.Smile.Video.SmileVideoPlayerWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"

  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"

  xmlns:vlc_wpf="clr-namespace:Meta.Vlc.Wpf;assembly=Meta.Vlc.Wpf"

  xmlns:cttn_sl_view_converter="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Converter;assembly=ContentTypeTextNet.SharedLibrary"

  xmlns:app_define="clr-namespace:ContentTypeTextNet.MnMn.MnMn.Define"
  xmlns:app_define_service_smile_video="clr-namespace:ContentTypeTextNet.MnMn.MnMn.Define.Service.Smile.Video"
  xmlns:app_view_controls="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Controls"
  xmlns:app_view_converter="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Converter"
  xmlns:app_view_controls_service_smile_video_setting="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Controls.Service.Smile.Video.Setting"
  xmlns:app_view_converter_service_smile_video="clr-namespace:ContentTypeTextNet.MnMn.MnMn.View.Converter.Service.Smile.Video"

  ResizeMode="CanResizeWithGrip"

  Title="{Binding Title}"
  Left="{Binding Left, Mode=TwoWay}"
  Top="{Binding Top, Mode=TwoWay}"
  Width="{Binding Width, Mode=TwoWay}"
  Height="{Binding Height, Mode=TwoWay}"
  WindowState="{Binding State, Mode=TwoWay}"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
  d:DesignHeight="540" d:DesignWidth="780"
>
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/View/Resources/ListBoxDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/GridSplitterDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/ImageDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/MenuDictionary.xaml" />
        <ResourceDictionary Source="/View/Resources/TabDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

      <sys:Double x:Key="ImageWidth">100</sys:Double>
      <sys:Double x:Key="ImageHeight">80</sys:Double>

      <sys:Double x:Key="VideoInfoWidth">120</sys:Double>
      <sys:Double x:Key="VideoInfoHeight">120</sys:Double>

      <cttn_sl_view_converter:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
      <cttn_sl_view_converter:IsEmptyCollectionConverter x:Key="IsEmptyCollectionConverter" />
      <cttn_sl_view_converter:TimeSpanToMillisecondConverter x:Key="TimeSpanToMillisecondConverter" />
      <cttn_sl_view_converter:LogicalNotConverter x:Key="LogicalNotConverter" />

      <app_view_converter:LoadStateIsLoadedConverter x:Key="LoadStateIsLoadedConverter" />
      <app_view_converter_service_smile_video:TimespanToHMFormatConverter x:Key="TimespanToHMFormatConverter" />
      <app_view_converter_service_smile_video:BookmarkLevelConverter x:Key="BookmarkLevelConverter" />

      <CollectionViewSource x:Key="PlayListItems" Source="{Binding PlayListItems}" />

      <Style x:Key="ThumbnailImage" TargetType="Image" >
        <Setter Property="Width" Value="{StaticResource ImageWidth}" />
        <Setter Property="Height" Value="{StaticResource ImageHeight}" />
      </Style>

      <Style x:Key="PlayListVisible">
        <Style.Triggers>
          <DataTrigger Binding="{Binding PlayListItems.CanItemChange}" Value="True">
            <Setter Property="Menu.IsEnabled" Value="True" />
            <Setter Property="Menu.Visibility" Value="Visible" />
            <Setter Property="Separator.Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="Menu.IsEnabled" Value="False" />
        <Setter Property="Menu.Visibility" Value="Collapsed" />
        <Setter Property="Separator.Visibility" Value="Collapsed" />
      </Style>
      <Style x:Key="PlayListChangeButton" TargetType="Button">
        <Style.Triggers>
          <DataTrigger Binding="{Binding PlayListItems.CanItemChange}" Value="True">
            <Setter Property="IsEnabled" Value="True" />
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
      </Style>
      <Style x:Key="PlayListChangeMenuItem" TargetType="MenuItem" BasedOn="{StaticResource DefaultMenuItem}">
        <Style.Triggers>
          <DataTrigger Binding="{Binding PlayListItems.CanItemChange}" Value="True">
            <Setter Property="IsEnabled" Value="True" />
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
      </Style>
      <Style x:Key="PlayListPrevChangeButton" TargetType="Button" BasedOn="{StaticResource PlayListChangeButton}">
        <Style.Triggers>
          <DataTrigger Binding="{Binding IsRandomPlay}" Value="True">
            <Setter Property="IsEnabled" Value="False" />
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="IsEnabled" Value="True" />
      </Style>
      <Style x:Key="PlayListPrevChangeMenuItem" TargetType="MenuItem" BasedOn="{StaticResource PlayListChangeMenuItem}">
        <Style.Triggers>
          <DataTrigger Binding="{Binding IsRandomPlay}" Value="True">
            <Setter Property="IsEnabled" Value="False" />
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="IsEnabled" Value="True" />
      </Style>

      <Style x:Key="ButtonImage" TargetType="Image" BasedOn="{StaticResource ThumbnailImage}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
      </Style>

      <Style x:Key="StatePanel" TargetType="Canvas">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
      </Style>

      <Style x:Key="StateControl" TargetType="app_view_controls:LoadStateNavigator">
        <Setter Property="Width" Value="6" />
        <Setter Property="Height" Value="6" />
        <Setter Property="Canvas.Left" Value="10" />
        <Setter Property="Canvas.Top" Value="10" />
        <Setter Property="LoadedToVisibility" Value="Visible" />
      </Style>

      <Style x:Key="UserSelect" TargetType="RadioButton">
        <Setter Property="Margin" Value="4,0,0,0" />
      </Style>

      <Style x:Key="DummyMenu" TargetType="Menu"/>


    </ResourceDictionary>
  </Window.Resources>
  <DockPanel>

    <ToolBar DockPanel.Dock="Top">
      <Button Command="{Binding OpenCacheDirectoryCommand}">
        <StackPanel Orientation="Horizontal">
          <TextBlock Text="キャッシュ:" />
          <TextBlock Text="{Binding VideoId}" />
        </StackPanel>
      </Button>
      <Menu Style="{StaticResource DummyMenu}">
        <MenuItem Header="マイリスト追加" ItemsSource="{Binding AccountMyListItems}">
          <!-- マイリストは「とりあえずマイリスト」があるから一つもないことはないだろうと思う -->
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource DefaultMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.AddMyListCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding MyListName}" />
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>
      <Menu>
        <Menu.Style>
          <Style TargetType="Menu" BasedOn="{StaticResource DummyMenu}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding BookmarkItems, Converter={StaticResource IsEmptyCollectionConverter}}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Menu.Style>
        <MenuItem Header="ブックマーク追加" ItemsSource="{Binding BookmarkItems}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource DefaultMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.AddBookmarkCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <StackPanel Orientation="Horizontal">
                <Border>
                  <Border.Width>
                    <Binding Path="Level" Converter="{StaticResource BookmarkLevelConverter}">
                      <Binding.ConverterParameter>
                        <sys:Int32>8</sys:Int32>
                      </Binding.ConverterParameter>
                    </Binding>
                  </Border.Width>
                </Border>
                <TextBlock Text="{Binding Name}" />
              </StackPanel>
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>

      <Separator Style="{StaticResource PlayListVisible}" />
      <Button Command="{Binding LoadPrevPlayListItemCommand}" Style="{StaticResource PlayListPrevChangeButton}">
        <Image Source="/Resources/Service/Smile/Video/Player/Backward.png" Style="{StaticResource ButtonImage}" />
      </Button>
      <Menu Style="{StaticResource PlayListVisible}">
        <MenuItem Header="プレイリスト">
          <MenuItem.ItemsSource>
            <CompositeCollection>
              <CollectionContainer Collection="{Binding Source={StaticResource PlayListItems}}" />
              <Separator />
              <MenuItem Header="次の動画" Command="{Binding LoadNextPlayListItemCommand}" Style="{StaticResource PlayListChangeMenuItem}">
                <MenuItem.Icon>
                  <Image Source="/Resources/Service/Smile/Video/Player/Forward.png" Style="{StaticResource DefaultImage}" />
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="前の動画" Command="{Binding LoadPrevPlayListItemCommand}" Style="{StaticResource PlayListPrevChangeMenuItem}">
                <MenuItem.Icon>
                  <Image Source="/Resources/Service/Smile/Video/Player/Backward.png" Style="{StaticResource DefaultImage}" />
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="ランダム再生" IsCheckable="True" IsChecked="{Binding IsRandomPlay}" Style="{StaticResource PlayListChangeMenuItem}" />
            </CompositeCollection>
          </MenuItem.ItemsSource>
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource DefaultMenuItem}">
              <Setter Property="Command" Value="{Binding DataContext.LoadSelectPlayListItemCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
              <Setter Property="IsChecked" Value="{Binding IsPlaying}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" />
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
      </Menu>
      <Button Command="{Binding LoadNextPlayListItemCommand}" Style="{StaticResource PlayListChangeButton}">
        <Image Source="/Resources/Service/Smile/Video/Player/Forward.png" Style="{StaticResource ButtonImage}" />
      </Button>

      <Separator />

      <Menu Style="{StaticResource DummyMenu}">
        <MenuItem Header="player size">
          <MenuItem>
            <MenuItem.Header>
              <TextBlock>
                思った以上に計算ややこしいから
                <LineBreak/>
                動画サイズに連動したプレイヤーサイズ変更は
                <LineBreak/>
                あとまわし
              </TextBlock>
            </MenuItem.Header>
            <MenuItem.Icon>
              <Label FontSize="30">☃</Label>
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Header="50%" Command="{Binding ChangePlayerSizeCommand}" CommandParameter="50"  />
          <MenuItem Header="75%" Command="{Binding ChangePlayerSizeCommand}" CommandParameter="75"  />
          <MenuItem Header="100%" Command="{Binding ChangePlayerSizeCommand}" CommandParameter="100"  />
          <MenuItem Header="150%" Command="{Binding ChangePlayerSizeCommand}" CommandParameter="150"  />
          <MenuItem Header="200%" Command="{Binding ChangePlayerSizeCommand}" CommandParameter="200" />
        </MenuItem>
      </Menu>

    </ToolBar>

    <StatusBar DockPanel.Dock="Bottom" >
      <StatusBar.Resources>
        <Style TargetType="app_view_controls:LoadStateNavigator">
          <Setter Property="LoadedToVisibility" Value="Visible" />
          <Setter Property="Width" Value="10" />
          <Setter Property="Height" Value="10" />
        </Style>
      </StatusBar.Resources>
      <ToggleButton x:Name="switchInformation" IsChecked="{Binding PlayerShowDetailArea}">
        <Canvas Style="{StaticResource StatePanel}">
          <Image Source="/Resources/Service/Smile/Video/Player/VideoInformation.png" Style="{StaticResource ButtonImage}" />
          <app_view_controls:LoadStateNavigator LoadState="{Binding InformationLoadState}" Style="{StaticResource StateControl}" />
        </Canvas>
      </ToggleButton>
      <TextBlock>
        <TextBlock>[</TextBlock>
        <TextBlock Text="{Binding PlayerState, Mode=OneWay}"/>
        <TextBlock>]</TextBlock>
      </TextBlock>
      <Canvas Style="{StaticResource StatePanel}">
        <Image Source="/Resources/Service/Smile/Video/Player/ImageState.png" Style="{StaticResource ButtonImage}" />
        <app_view_controls:LoadStateNavigator LoadState="{Binding ThumbnailLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <Canvas Style="{StaticResource StatePanel}">
        <Image Source="/Resources/Service/Smile/Video/Player/CommentState.png" Style="{StaticResource ButtonImage}" />
        <app_view_controls:LoadStateNavigator LoadState="{Binding CommentLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <Canvas Style="{StaticResource StatePanel}">
        <Image Source="/Resources/Service/Smile/Video/Player/VideoState.png" Style="{StaticResource ButtonImage}" />
        <app_view_controls:LoadStateNavigator LoadState="{Binding VideoLoadState}" Style="{StaticResource StateControl}" />
      </Canvas>
      <TextBlock ToolTip="動画サイズ">
        <TextBlock Text="{Binding RealVideoWidth, Mode=OneWay}" />
        <TextBlock>x</TextBlock>
        <TextBlock Text="{Binding RealVideoHeight, Mode=OneWay}" />
        </TextBlock>
      <Image>
        <Image.Style>
          <Style TargetType="Image" BasedOn="{StaticResource ButtonImage}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsEconomyMode}" Value="True">
                <Setter Property="Source" Value="/Resources/Service/Smile/Video/Player/EconomyMode.png" />
                <Setter Property="ToolTip" Value="エコノミーモード" />
              </DataTrigger>
              <DataTrigger Binding="{Binding IsEconomyMode}" Value="False">
                <Setter Property="Source" Value="/Resources/Service/Smile/Video/Player/NormalMode.png" />
                <Setter Property="ToolTip" Value="通常画質" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Image.Style>
      </Image>
      <ContentControl>
        <ContentControl.Style>
          <Style TargetType="ContentControl">
            <Style.Triggers>
              <DataTrigger Binding="{Binding InformationLoadState, Converter={StaticResource LoadStateIsLoadedConverter}}" Value="False">
                <Setter Property="Content">
                  <Setter.Value>
                    <TextBlock>動画情報未取得</TextBlock>
                  </Setter.Value>
                </Setter>
              </DataTrigger>
              <DataTrigger Binding="{Binding InformationLoadState, Converter={StaticResource LoadStateIsLoadedConverter}}" Value="True">
                <Setter Property="Content">
                  <Setter.Value>
                    <StackPanel Orientation="Horizontal">
                      <StackPanel.Resources>
                        <Style TargetType="TextBlock">
                          <Setter Property="Margin" Value="0,0,8,0" />
                        </Style>
                      </StackPanel.Resources>
                      <TextBlock Text="{Binding VideoInformation.FirstRetrieve, Mode=OneWay, StringFormat=投稿日時: {0:yyyy/MM/dd HH:mm:ss}}" />
                      <TextBlock Text="{Binding VideoInformation.ViewCounter, Mode=OneWay, StringFormat=再生数: {0:#,#.}}" />
                      <TextBlock Text="{Binding VideoInformation.CommentCounter, Mode=OneWay, StringFormat=コメント数: {0:#,#.}}" />
                      <TextBlock Text="{Binding VideoInformation.MylistCounter, Mode=OneWay, StringFormat=マイリスト数: {0:#,#.}}" />
                    </StackPanel>
                  </Setter.Value>
                </Setter>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>
    </StatusBar>

    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"  />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="120" />
      </Grid.RowDefinitions>

      <Grid Grid.Row="0" VerticalAlignment="Stretch">
        <Grid.Style>
          <Style>
            <Setter Property="Grid.RowSpan" Value="1" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsChecked, ElementName=switchInformation}" Value="False">
                <Setter Property="Grid.RowSpan" Value="3" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="7*" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" x:Name="viewPlayer">
          <Grid.Style>
            <Style>
              <Setter Property="Grid.ColumnSpan" Value="1" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding PlayerShowCommentArea}" Value="False">
                  <Setter Property="Grid.ColumnSpan" Value="3" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Grid.Style>
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>

          <vlc_wpf:VlcPlayer x:Name="player" Grid.Row="0" EndBehavior="Nothing" />

          <Viewbox Grid.Row="0" ClipToBounds="True" Stretch="Fill" Width="{Binding BaseWidth}" Height="{Binding BaseHeight}" Visibility="{Binding PlayerVisibleComment, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid Width="{Binding CommentAreaWidth}" Height="{Binding CommentAreaHeight}" >
              <Canvas x:Name="normalCommentArea" />
              <Canvas x:Name="originalPosterCommentArea" />
              <Rectangle
                VerticalAlignment="Top"
                HorizontalAlignment="Stretch"
                Fill="#80ffffff"
                Width="{Binding CommentAreaWidth}"
                Height="{Binding CommentEnabledHeight}"
                Visibility="{Binding ShowEnabledCommentPreviewArea, Converter={StaticResource BooleanToVisibilityConverter}}"
              />
            </Grid>
          </Viewbox>

          <Grid Grid.Row="1">
            <Grid.RowDefinitions>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <app_view_controls:Navigationbar
              x:Name="seekbar"
              Grid.Row="0"
              VideoPosition="{Binding VideoPosition}"
              VideoLoadedSize="{Binding VideoLoadedSize}"
              VideoTotalSize="{Binding VideoTotalSize}"
              Volume="{Binding Volume}"
              PlayTime="{Binding PlayTime}"
              TotalTime="{Binding TotalTime}"
              PlayerState="{Binding PlayerState}"
              PlayCommand="{Binding PlayCommand}"
              StopCommand="{Binding StopCommand}"
              IsReplayChecked="{Binding ReplayVideo}"
              IsMute="{Binding IsMute}"
            >
              <app_view_controls:Navigationbar.ExstendsContent>
                <StackPanel Orientation="Horizontal">
                  <ToggleButton ToolTip="コメント表示" IsChecked="{Binding PlayerVisibleComment}">
                    <StackPanel>
                      <Image Source="/Resources/Service/Smile/Video/Player/CommentShow.png" Style="{StaticResource ButtonImage}" />
                      <Popup
                        Placement="Relative"
                        VerticalOffset="-95"
                        Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                        PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                      >
                        <Popup.IsOpen>
                          <MultiBinding Converter="{StaticResource LogicalMultiOrConverter}">
                            <Binding Path="IsMouseOver" Mode="OneWay" RelativeSource="{RelativeSource AncestorType=ToggleButton}" />
                            <Binding Path="IsMouseOver" Mode="OneWay" RelativeSource="{RelativeSource Self}" />
                          </MultiBinding>
                        </Popup.IsOpen>
                        <StackPanel HorizontalAlignment="Center">
                          <ToggleButton Height="20" ToolTip="投稿者コメントもコメント位置制限対象とする" IsChecked="{Binding IsEnabledOriginalPosterCommentArea}">
                            <Image Source="/Resources/Service/Smile/Video/Player/OriginalPoster.png" Style="{StaticResource SmallIconImage}" />
                          </ToggleButton>
                          <Slider
                            Orientation="Vertical"
                            Height="80"
                            Minimum="50"
                            Maximum="100"
                            IsDirectionReversed="True"
                            Value="{Binding CommentEnabledPercent}"
                          />
                        </StackPanel>
                      </Popup>

                    </StackPanel>
                  </ToggleButton>
                  <ToggleButton ToolTip="コメントリスト表示" IsChecked="{Binding PlayerShowCommentArea}">
                    <Image Source="/Resources/Service/Smile/Video/Player/CommentList.png" Style="{StaticResource ButtonImage}" />
                  </ToggleButton>
                </StackPanel>
              </app_view_controls:Navigationbar.ExstendsContent>
            </app_view_controls:Navigationbar>
          </Grid>

          <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="3*" />
              <ColumnDefinition Width="7*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <xctk:DropDownButton Grid.Column="0">
              <xctk:DropDownButton.DropDownContent>
                <StackPanel>
                  <StackPanel Orientation="Horizontal">
                    <Label>サイズ</Label>
                    <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Small}}">少</RadioButton>
                    <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Medium}}">中</RadioButton>
                    <RadioButton IsChecked="{Binding PostCommandSize, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentSize.Big}}">大</RadioButton>
                  </StackPanel>

                  <StackPanel Orientation="Horizontal">
                    <Label>位置</Label>
                    <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Top}}">上</RadioButton>
                    <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Normal}}">中</RadioButton>
                    <RadioButton IsChecked="{Binding PostCommandVertical, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoCommentVertical.Bottom}}">下</RadioButton>
                  </StackPanel>

                  <StackPanel Orientation="Horizontal">
                    <Label>色</Label>
                    <StackPanel>
                      <!-- 通常用 -->
                      <ListBox Background="Transparent" BorderBrush="Transparent" ItemsSource="{Binding CommandColorItems}" SelectedItem="{Binding PostCommandColor}" >
                        <ListBox.ItemsPanel>
                          <ItemsPanelTemplate>
                            <UniformGrid Rows="2" Columns="10" />
                          </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <ListBox.ItemContainerStyle>
                          <Style TargetType="ListBoxItem">
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                  <RadioButton IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected}">
                                    <Rectangle Width="16" Height="16">
                                      <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding}" />
                                      </Rectangle.Fill>
                                    </Rectangle>
                                  </RadioButton>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </ListBox.ItemContainerStyle>
                      </ListBox>
                    </StackPanel>
                  </StackPanel>
                  <CheckBox IsEnabled="{Binding IsEnabledPostAnonymous, Converter={StaticResource LogicalNotConverter}}" IsChecked="{Binding IsPostAnonymous}">184投稿</CheckBox>
                  <Separator />
                  <StackPanel Orientation="Horizontal">
                    <Label>先頭追加</Label>
                    <TextBox Text="{Binding PostBeforeCommand}"></TextBox>
                    <Label>後続追加</Label>
                    <TextBox Text="{Binding PostAfterCommand}"></TextBox>
                  </StackPanel>
                  <Separator />
                  <StackPanel Orientation="Horizontal">
                    <Label>COMMAND:</Label>
                    <ItemsControl ItemsSource="{Binding PostCommandItems}">
                      <ItemsControl.ItemTemplate>
                        <DataTemplate>
                          <TextBlock Text="{Binding}" />
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                      <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                          <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                      </ItemsControl.ItemsPanel>
                    </ItemsControl>
                  </StackPanel>
                </StackPanel>
              </xctk:DropDownButton.DropDownContent>
              コマンド
            </xctk:DropDownButton>
            <TextBox Grid.Column="1" Text="{Binding PostCommentBody}"></TextBox>
            <Button Grid.Column="2" Command="{Binding PostCommentCommand}">投稿</Button>
          </Grid>
        </Grid>

        <GridSplitter
          Grid.Row="0" Grid.Column="1"
          Style="{StaticResource DefaultVericalGridSplitter}"
          Visibility="{Binding PlayerShowCommentArea, Converter={StaticResource BooleanToVisibilityConverter}}"
        />

        <TabControl Grid.Row="0" Grid.Column="2" Visibility="{Binding PlayerShowCommentArea, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{StaticResource FinderTab}">
          <TabItem Header="コメント">
            <DockPanel>
              <DockPanel DockPanel.Dock="Top">
                <DockPanel DockPanel.Dock="Top">
                  <CheckBox DockPanel.Dock="Left" IsChecked="{Binding IsAutoScroll}">自動スクロール</CheckBox>
                  <CheckBox DockPanel.Dock="Left" IsChecked="{Binding IsEnabledSharedNoGood}">共有NG</CheckBox>
                  <TextBlock DockPanel.Dock="Left" Margin="2,0,0,0">低</TextBlock>
                  <TextBlock DockPanel.Dock="Right">高</TextBlock>
                  <Slider Minimum="-3000" Maximum="-1" Value="{Binding SharedNoGoodScore}" ToolTip="{Binding SharedNoGoodScore}" />
                </DockPanel>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.All}}">
                  <TextBlock Text="{Binding CommentListCount, Mode=OneWay, StringFormat=全て({0})}" />
                </RadioButton>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.OriginalPoster}}">
                  <RadioButton.Style>
                    <Style TargetType="RadioButton" BasedOn="{StaticResource UserSelect}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding OriginalPosterCommentListCount}" Value="0">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </RadioButton.Style>
                  <TextBlock Text="{Binding OriginalPosterCommentListCount, Mode=OneWay, StringFormat=投稿者({0})}" />
                </RadioButton>
                <RadioButton DockPanel.Dock="Left" IsChecked="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.UserId}}">
                  <RadioButton.Style>
                    <Style TargetType="RadioButton" BasedOn="{StaticResource UserSelect}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding CommentListCount}" Value="0">
                          <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </RadioButton.Style>
                  <TextBlock>ユーザー</TextBlock>
                </RadioButton>
                <TextBlock DockPanel.Dock="Right">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding FilteringCommentType}" Value="UserId">
                          <Setter Property="Text" Value="{Binding CommentItems.CanItemChange, Mode=OneWay, StringFormat=({0})}" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <ComboBox
                  IsEditable="True"
                  Text="{Binding FilteringUserId, Delay=500, UpdateSourceTrigger=PropertyChanged}"
                  ItemsSource="{Binding FilteringUserList}"
                  IsEnabled="{Binding FilteringCommentType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define_service_smile_video:SmileVideoFilteringCommentType.UserId}}"
                >
                  <ComboBox.ItemTemplate>
                    <DataTemplate>
                      <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding UserId, Mode=OneTime}"/>
                        <TextBlock>(</TextBlock>
                        <TextBlock Text="{Binding UserKind, Mode=OneTime}" />
                        <TextBlock>:</TextBlock>
                        <TextBlock Text="{Binding Count, Mode=OneTime}" />
                        <TextBlock>)</TextBlock>
                      </StackPanel>
                    </DataTemplate>
                  </ComboBox.ItemTemplate>
                </ComboBox>
              </DockPanel>
              <DockPanel DockPanel.Dock="Bottom">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*" />
                    <ColumnDefinition Width="6*" />
                  </Grid.ColumnDefinitions>
                  <CheckBox Grid.Column="0" VerticalAlignment="Center" IsChecked="{Binding IsEnabledDisplayCommentLimit}">
                    <TextBlock>
                      <TextBlock>表示制限</TextBlock>
                      <TextBlock>(</TextBlock>
                      <TextBlock Text="{Binding ShowingCommentList.Count, Mode=OneWay}" />
                      <TextBlock>
                        <TextBlock.Style>
                          <Style TargetType="TextBlock">
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding IsEnabledDisplayCommentLimit}" Value="True">
                                <Setter Property="Text" Value="{Binding DisplayCommentLimitCount, StringFormat=/{0}}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </TextBlock.Style>
                      </TextBlock>
                      <TextBlock>)</TextBlock>
                    </TextBlock>
                  </CheckBox>
                  <DockPanel Grid.Column="1">
                    <TextBlock DockPanel.Dock="Left" VerticalAlignment="Center" >少</TextBlock>
                    <TextBlock DockPanel.Dock="Right" VerticalAlignment="Center">多</TextBlock>
                    <Slider
                      Minimum="1"
                      Maximum="50"
                      Value="{Binding DisplayCommentLimitCount}"
                      IsEnabled="{Binding IsEnabledDisplayCommentLimit}"
                    />
                  </DockPanel>
                </Grid>
              </DockPanel>
              <DockPanel DockPanel.Dock="Bottom" Visibility="{Binding IsSelectedComment, Converter={StaticResource BooleanToVisibilityConverter}}">
                <GroupBox>
                  <GroupBox.Header>
                    <DockPanel>
                      <Button DockPanel.Dock="Right" Margin="8,0,0,0" FontFamily="Webdings"  Content="r" Command="{Binding ClearSelectedCommentCommand}" />
                      <Label>コメント詳細</Label>
                    </DockPanel>
                  </GroupBox.Header>
                  <Grid>
                    <Grid.Resources>
                      <Style TargetType="TextBox">
                        <Setter Property="IsReadOnly" Value="True" />
                      </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                      <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <Label Grid.Row="0" Grid.Column="0">表示時間</Label>
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding SelectedComment.ElapsedTime, Mode=OneWay}" />

                    <Label Grid.Row="1" Grid.Column="0">投稿時間</Label>
                    <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedComment.Timestamp, Mode=OneWay, StringFormat={}{0:yyy/MM/dd HH:mm:ss}}" />

                    <Label Grid.Row="2" Grid.Column="0">スコア</Label>
                    <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedComment.Score, Mode=OneWay}" />

                    <Label Grid.Row="3" Grid.Column="0">コメント</Label>
                    <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding SelectedComment.Content, Mode=OneWay}" />

                    <Label Grid.Row="4" Grid.Column="0">コマンド</Label>
                    <ComboBox Grid.Row="4" Grid.Column="1" SelectedIndex="0" ItemsSource="{Binding SelectedComment.Commands, Mode=OneWay}" />

                    <Label Grid.Row="5" Grid.Column="0">ユーザーID</Label>
                    <TextBox Grid.Row="5" Grid.Column="1" Text="{Binding SelectedComment.UserId, Mode=OneWay}" />

                    <Label Grid.Row="6" Grid.Column="0">ユーザー種別</Label>
                    <TextBox Grid.Row="6" Grid.Column="1" Text="{Binding SelectedComment.UserKind, Mode=OneWay}" />

                    <Label Grid.Row="7" Grid.Column="0">匿名投稿</Label>
                    <TextBox Grid.Row="7" Grid.Column="1" Text="{Binding SelectedComment.Anonymity, Mode=OneWay}" />

                    <Label Grid.Row="8" Grid.Column="0">表示許可</Label>
                    <TextBox Grid.Row="8" Grid.Column="1" Text="{Binding SelectedComment.Approval, Mode=OneWay}" />
                  </Grid>
                </GroupBox>
              </DockPanel>

              <ListView x:Name="commentView" SelectedItem="{Binding SelectedComment}" ItemsSource="{Binding CommentItems}">
                <ListView.ItemContainerStyle>
                  <Style TargetType="ListViewItem">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding NowShowing}" Value="True">
                        <Setter Property="FontWeight" Value="Bold" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ListView.ItemContainerStyle>
                <ListView.View>
                  <GridView>
                    <GridViewColumn>
                      <GridViewColumn.HeaderTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="時間" />
                        </ItemContainerTemplate>
                      </GridViewColumn.HeaderTemplate>
                      <GridViewColumn.CellTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="{Binding ElapsedTime, Converter={StaticResource TimespanToHMFormatConverter}}" />
                        </ItemContainerTemplate>
                      </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn>
                      <GridViewColumn.HeaderTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="コメント" />
                        </ItemContainerTemplate>
                      </GridViewColumn.HeaderTemplate>
                      <GridViewColumn.CellTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="{Binding Content}">
                            <TextBlock.Style>
                              <Style TargetType="TextBlock">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Approval}" Value="False">
                                    <Setter Property="TextDecorations">
                                      <Setter.Value>
                                        <TextDecorationCollection>
                                          <TextDecoration Location="Strikethrough" />
                                        </TextDecorationCollection>
                                      </Setter.Value>
                                    </Setter>
                                  </DataTrigger>
                                </Style.Triggers>
                              </Style>
                            </TextBlock.Style>
                          </TextBlock>
                        </ItemContainerTemplate>
                      </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn>
                      <GridViewColumn.HeaderTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="投稿時間" />
                        </ItemContainerTemplate>
                      </GridViewColumn.HeaderTemplate>
                      <GridViewColumn.CellTemplate>
                        <ItemContainerTemplate>
                          <TextBlock Text="{Binding Timestamp, StringFormat={}{0:yyy/MM/dd HH:mm:ss}}" />
                        </ItemContainerTemplate>
                      </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                  </GridView>
                </ListView.View>
              </ListView>
            </DockPanel>
          </TabItem>
          <TabItem Header="ローカルNG" Margin="0">
            <app_view_controls_service_smile_video_setting:SmileVideoFilteringCommentList x:Name="localFilter">
              <i:Interaction.Triggers>
                <i:EventTrigger EventName="FilteringChanged">
                  <i:InvokeCommandAction Command="{Binding ChangedFilteringCommand}" />
                </i:EventTrigger>
              </i:Interaction.Triggers>
            </app_view_controls_service_smile_video_setting:SmileVideoFilteringCommentList>
          </TabItem>
          <TabItem Header="全体NG">
            <app_view_controls_service_smile_video_setting:SmileVideoFilteringCommentList Filtering="{Binding GlobalCommentFilering}">
              <i:Interaction.Triggers>
                <i:EventTrigger EventName="FilteringChanged">
                  <i:InvokeCommandAction Command="{Binding ChangedFilteringCommand}" />
                </i:EventTrigger>
              </i:Interaction.Triggers>
            </app_view_controls_service_smile_video_setting:SmileVideoFilteringCommentList>
          </TabItem>
          <TabItem Header="設定">
            <StackPanel>
              <Button Command="{Binding ResetCommentSettingCommand}">コメント設定の初期化</Button>
              <Separator />
              <app_view_controls:FontSelectControl
                FamilyName="{Binding CommentFontFamily}"
                IsEnabledBold="True"
                IsEnabledItalic="True"
                IsBold="{Binding CommentFontBold}"
                IsItalic="{Binding CommentFontItalic}"
                Size="{Binding CommentFontSize}"
                SizeMinimum="10"
                SizeMaximum="50"
              />
              <DockPanel>
                <Label DockPanel.Dock="Left">透明度</Label>
                <Slider Minimum="0.1" Maximum="1" Value="{Binding CommentFontAlpha}" />
              </DockPanel>
              <DockPanel>
                <Label DockPanel.Dock="Left">表示時間</Label>
                <!-- TODO: UI側で制限 -->
                <Slider Minimum="1000" Maximum="10000" Value="{Binding CommentShowTime, Converter={StaticResource TimeSpanToMillisecondConverter}}" />
              </DockPanel>
              <CheckBox IsChecked="{Binding CommentConvertPairYenSlash}">
                <TextBlock TextWrapping="Wrap">コメント内の/と対になる円記号(&#xA5;)をバックスラッシュ(&#x29F5;)に変換</TextBlock>
              </CheckBox>
              <DockPanel>
                <Label Content="テキスト描画" DockPanel.Dock="Left" />
                <StackPanel Orientation="Horizontal">
                  <RadioButton VerticalAlignment="Center" Content="影付き" IsChecked="{Binding PlayerTextShowKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define:TextShowKind.Shadow}}" />
                  <RadioButton VerticalAlignment="Center" Content="縁取り" IsChecked="{Binding PlayerTextShowKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_define:TextShowKind.Outline}}" />
                </StackPanel>
              </DockPanel>
            </StackPanel>
          </TabItem>
        </TabControl>
      </Grid>

      <GridSplitter
        Grid.Row="1"
        Height="4"
        Style="{StaticResource DefaultHorizonGridSplitter}"
        Visibility="{Binding IsChecked, ElementName=switchInformation, Converter={StaticResource BooleanToVisibilityConverter}}"
      />

      <TabControl
        Grid.Row="2"
        TabStripPlacement="Left"
        Visibility="{Binding IsChecked, ElementName=switchInformation, Converter={StaticResource BooleanToVisibilityConverter}}"
      >
        <TabItem Header="動画情報" IsSelected="{Binding IsSelectedVideoInformation}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="4" />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0">
              <Image Style="{StaticResource ThumbnailImage}" Source="{Binding ThumbnailImage}" />

              <!--<TextBlock Text="{Binding UserNickname}" />-->
              <Grid>
                <app_view_controls:LoadStateNavigator LoadState="{Binding InformationLoadState}" />
                <TextBlock Width="{StaticResource ImageWidth}" TextTrimming="CharacterEllipsis">
                  <Hyperlink Command="{Binding OpenUserIdCommand}">
                    <Run>
                      <Run.Resources>
                        <Style TargetType="Run">
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding InformationLoadState}" Value="Loaded">
                              <Setter Property="Text" Value="{Binding UserNickname, Mode=OneTime}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </Run.Resources>
                    </Run>
                  </Hyperlink>
                </TextBlock>
              </Grid>

            </StackPanel>

            <GridSplitter Grid.Column="1" />

            <Grid Grid.Row="1"  Grid.Column="2" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                  <Image Source="/Resources/SearchType/Tag.png" Style="{StaticResource ItemImage}" />
                  <TextBlock Text="登録タグ" Margin="2,0,8,0" VerticalAlignment="Center" />
                </StackPanel>
                <ItemsControl Grid.Column="1" ItemsSource="{Binding TagItems}">
                  <ItemsControl.Resources>
                    <Style TargetType="TextBlock">
                      <Setter Property="FontSize" Value="10" />
                      <Setter Property="VerticalAlignment" Value="Stretch" />
                    </Style>
                    <Style TargetType="Image">
                      <Setter Property="VerticalAlignment" Value="Center" />
                      <Setter Property="Width" Value="12" />
                      <Setter Property="Height" Value="12" />
                    </Style>
                  </ItemsControl.Resources>
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                  <ItemsControl.ItemTemplate>
                    <DataTemplate>
                      <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <!--<TextBlock Visibility="{Binding IsCategory, Converter={StaticResource BooleanToVisibilityConverter}}" >[C]</TextBlock>-->
                        <Image Source="/Resources/Service/Smile/Video/Player/Lock.png" Visibility="{Binding IsLocked, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{StaticResource DefaultImage}" />
                        <TextBlock>
                          <Hyperlink
                            Command="{Binding DataContext.SearchTagCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                            CommandParameter="{Binding}"
                          >
                            <Run Text="{Binding TagName, Mode=OneTime}" />
                          </Hyperlink>
                        </TextBlock>
                        <Button Cursor="Hand" Command="{Binding DataContext.OpenPediaCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}" Visibility="{Binding ExistPedia, Converter={StaticResource BooleanToVisibilityConverter}}">
                          <Button.Template>
                            <ControlTemplate>
                              <Image Cursor="Hand" Source="/Resources/Service/Smile/Video/Player/Pedia.png" Style="{StaticResource DefaultImage}" />
                            </ControlTemplate>
                          </Button.Template>
                        </Button>
                        <!-- TODO: ださい -->
                        <Border Width="8" />
                      </StackPanel>
                    </DataTemplate>
                  </ItemsControl.ItemTemplate>
                </ItemsControl>
              </Grid>
              <Grid Grid.Row="1">
                <FlowDocumentScrollViewer
                x:Name="documentDescription"
                ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                FontFamily="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"
              >
                  <FlowDocument
                    FontSize="11.5"
                    PagePadding="10, 2, 10, 0"
                  />
                </FlowDocumentScrollViewer>
              </Grid>
            </Grid>
          </Grid>
        </TabItem>
        <TabItem Header="関連動画">
          <ScrollViewer>
            <ItemsControl ItemsSource="{Binding RelationVideoItems}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <UniformGrid />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <TextBlock TextAlignment="Center" Width="{StaticResource VideoInfoWidth}" Height="{StaticResource VideoInfoHeight}" ToolTip="{Binding Title, Mode=OneTime}">
                    <Hyperlink Command="{Binding DataContext.OpenRelationVideo, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}">
                      <Grid>
                        <app_view_controls:LoadStateNavigator ShowStateText="True" LoadState="{Binding ThumbnailLoadState}" />
                        <Image Style="{StaticResource ThumbnailImage}" Source="{Binding ThumbnailImage}" />
                      </Grid>
                      <LineBreak />
                      <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding Title, Mode=OneTime}" />
                    </Hyperlink>
                  </TextBlock>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </TabItem>
        <TabItem Header="market" IsEnabled="False">
          <ScrollViewer>
            <ItemsControl ItemsSource="{Binding MarketItems}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <UniformGrid />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <StackPanel>
                    <TextBlock>market item</TextBlock>
                  </StackPanel>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </TabItem>
      </TabControl>
    </Grid>
  </DockPanel>
</Window>
